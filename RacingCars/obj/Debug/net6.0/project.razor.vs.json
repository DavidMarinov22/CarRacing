{"SerializedFilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\obj\\Debug\\net6.0\\project.razor.vs.json","FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\RacingCars.csproj","Configuration":{"ConfigurationName":"MVC-3.0","LanguageVersion":"6.0","Extensions":[{"ExtensionName":"MVC-3.0"}]},"ProjectWorkspaceState":{"TagHelpers":[{"HashCode":1724893333,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.EditPilot","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditPilot"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"pilot","TypeName":"RacingCars.VMs.PilotVM","Metadata":{"Common.PropertyName":"pilot","Common.GloballyQualifiedTypeName":"global::RacingCars.VMs.PilotVM"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.EditPilot","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"EditPilot"}},{"HashCode":1009451816,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.EditPilot","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Pilots.EditPilot"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"pilot","TypeName":"RacingCars.VMs.PilotVM","Metadata":{"Common.PropertyName":"pilot","Common.GloballyQualifiedTypeName":"global::RacingCars.VMs.PilotVM"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.EditPilot","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"EditPilot","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":516043648,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.AddPilot","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AddPilot"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.AddPilot","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"AddPilot"}},{"HashCode":-1092412085,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.AddPilot","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Pilots.AddPilot"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.AddPilot","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"AddPilot","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1563520602,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.Index","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"Index"}},{"HashCode":-301081854,"Kind":"Components.Component","Name":"RacingCars.Pages.Pilots.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Pilots.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Pilots.Index","Common.TypeNamespace":"RacingCars.Pages.Pilots","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":415979802,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.AddCar","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AddCar"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.AddCar","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"AddCar"}},{"HashCode":-165556097,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.AddCar","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Cars.AddCar"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.AddCar","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"AddCar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2124672637,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.Index","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"Index"}},{"HashCode":-1228465854,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Cars.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.Index","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-781501492,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.EditCar","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditCar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"car","TypeName":"RacingCars.VMs.CarVM","Metadata":{"Common.PropertyName":"car","Common.GloballyQualifiedTypeName":"global::RacingCars.VMs.CarVM"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.EditCar","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"EditCar"}},{"HashCode":1810450858,"Kind":"Components.Component","Name":"RacingCars.Pages.Cars.EditCar","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Cars.EditCar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"car","TypeName":"RacingCars.VMs.CarVM","Metadata":{"Common.PropertyName":"car","Common.GloballyQualifiedTypeName":"global::RacingCars.VMs.CarVM"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Cars.EditCar","Common.TypeNamespace":"RacingCars.Pages.Cars","Common.TypeNameIdentifier":"EditCar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-472795575,"Kind":"Components.Component","Name":"RacingCars.Pages.Races.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Races.Index","Common.TypeNamespace":"RacingCars.Pages.Races","Common.TypeNameIdentifier":"Index"}},{"HashCode":-72657595,"Kind":"Components.Component","Name":"RacingCars.Pages.Races.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Races.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Races.Index","Common.TypeNamespace":"RacingCars.Pages.Races","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1843797077,"Kind":"Components.Component","Name":"RacingCars.Pages.TopRacers","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TopRacers"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.TopRacers","Common.TypeNamespace":"RacingCars.Pages","Common.TypeNameIdentifier":"TopRacers"}},{"HashCode":-491381902,"Kind":"Components.Component","Name":"RacingCars.Pages.TopRacers","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.TopRacers"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.TopRacers","Common.TypeNamespace":"RacingCars.Pages","Common.TypeNameIdentifier":"TopRacers","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1616647462,"Kind":"Components.Component","Name":"RacingCars.Pages.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Index","Common.TypeNamespace":"RacingCars.Pages","Common.TypeNameIdentifier":"Index"}},{"HashCode":1700721821,"Kind":"Components.Component","Name":"RacingCars.Pages.Index","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Pages.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Pages.Index","Common.TypeNamespace":"RacingCars.Pages","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1550472321,"Kind":"Components.Component","Name":"RacingCars.Shared.NavMenu","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.NavMenu","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"NavMenu"}},{"HashCode":-451669149,"Kind":"Components.Component","Name":"RacingCars.Shared.NavMenu","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Shared.NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.NavMenu","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"NavMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-275884217,"Kind":"Components.Component","Name":"RacingCars.Shared.MainLayout","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.MainLayout","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":1817352049,"Kind":"Components.Component","Name":"RacingCars.Shared.MainLayout","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Shared.MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.MainLayout","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"MainLayout","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1728243113,"Kind":"Components.ChildContent","Name":"RacingCars.Shared.MainLayout.Body","AssemblyName":"RacingCars","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"RacingCars.Shared.MainLayout.Body","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2084502153,"Kind":"Components.ChildContent","Name":"RacingCars.Shared.MainLayout.Body","AssemblyName":"RacingCars","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"RacingCars.Shared.MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"RacingCars.Shared.MainLayout.Body","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1720790628,"Kind":"Components.Component","Name":"RacingCars.Shared.SurveyPrompt","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SurveyPrompt"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.SurveyPrompt","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"SurveyPrompt"}},{"HashCode":-453353486,"Kind":"Components.Component","Name":"RacingCars.Shared.SurveyPrompt","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.Shared.SurveyPrompt"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.Shared.SurveyPrompt","Common.TypeNamespace":"RacingCars.Shared","Common.TypeNameIdentifier":"SurveyPrompt","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":564461567,"Kind":"Components.Component","Name":"RacingCars.App","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.App","Common.TypeNamespace":"RacingCars","Common.TypeNameIdentifier":"App"}},{"HashCode":1537425814,"Kind":"Components.Component","Name":"RacingCars.App","AssemblyName":"RacingCars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RacingCars.App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"RacingCars.App","Common.TypeNamespace":"RacingCars","Common.TypeNameIdentifier":"App","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":237961896,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":706841927,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":277650784,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":702378435,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1949648456,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":-122780910,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1168677,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True"}},{"HashCode":-1405918276,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-540343182,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile"}},{"HashCode":2116952014,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-810294758,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True"}},{"HashCode":1335764901,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1042840320,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True"}},{"HashCode":402183783,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-704424015,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True"}},{"HashCode":607362914,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1616336821,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":962003863,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-939107832,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True"}},{"HashCode":333136699,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1107143834,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1957454337,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-793997452,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":1458068010,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2066070747,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":64814837,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1289462680,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True"}},{"HashCode":-452218330,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-415632838,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary"}},{"HashCode":1190414758,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1664230076,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate"}},{"HashCode":751764637,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1916457542,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-58713568,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":856993057,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-852217096,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1426551564,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-1689495322,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":539718622,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":264759166,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1227357245,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet"}},{"HashCode":-377751981,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-234472741,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":231181838,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":467845314,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-465490162,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1265326654,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-783568537,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1012350824,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1863252700,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1697457810,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":76279807,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1078884074,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True"}},{"HashCode":-1100061991,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2125564832,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1321347730,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1194930337,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1418845213,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1292363925,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":972528719,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-213175700,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBack","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewEvents","Components.GenericTyped":"True"}},{"HashCode":-407247517,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBack","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1353430266,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewFieldSettings","Components.GenericTyped":"True"}},{"HashCode":261323288,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewFieldSettings","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":685088255,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.GenericTyped":"True"}},{"HashCode":539836014,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":217970892,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":247864381,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":327801093,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-809422437,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2044575352,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-564542185,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1133464375,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.AnimationSettings"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.GenericTyped":"True"}},{"HashCode":779714618,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.AnimationSettings"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-737376921,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1820853898,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":469167706,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2032881643,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1827459972,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":90646530,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2039571354,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1333729184,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-574476342,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1932589190,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":508786316,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True"}},{"HashCode":1492590305,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1384309256,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-554236177,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":50669081,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromPrimitive","Components.GenericTyped":"True"}},{"HashCode":-2037835833,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromPrimitive","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1235980149,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFoundation","Components.GenericTyped":"True"}},{"HashCode":-716270042,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFoundation","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2129137534,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFields","Components.GenericTyped":"True"}},{"HashCode":-1055812505,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFields","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1788006330,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListItemBase","Components.GenericTyped":"True"}},{"HashCode":-1023473206,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListItemBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":373233128,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListCommonBase","Components.GenericTyped":"True"}},{"HashCode":981428417,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListCommonBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1202573602,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"PrimitiveListItem","Components.GenericTyped":"True"}},{"HashCode":-1029350685,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"PrimitiveListItem","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2023120769,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.GenericTyped":"True"}},{"HashCode":152659000,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1221518234,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1579824551,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":31065081,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator"}},{"HashCode":728081899,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1328961205,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerEvents"}},{"HashCode":1776194047,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1753256376,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates"}},{"HashCode":1774907422,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1101952849,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1314744102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2075397738,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Spinner.SpinnerType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner"}},{"HashCode":-1397578031,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Spinner.SpinnerType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1299076064,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":345620017,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Spinner.SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1337146586,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap"}},{"HashCode":2140595056,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1812694895,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap4"}},{"HashCode":-1077416728,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap4","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":616403235,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"FabricHighContrast"}},{"HashCode":858991632,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"FabricHighContrast","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1391456344,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Material"}},{"HashCode":-1693608150,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Material","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":406774009,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"SpinnerBase"}},{"HashCode":-69973281,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"SpinnerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1136548897,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton"}},{"HashCode":1979316444,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-133514570,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1142508151,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-141853226,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True"}},{"HashCode":-1390516755,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1693900090,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":762290006,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-518085811,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents"}},{"HashCode":1392589330,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1613060878,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem"}},{"HashCode":-2140637322,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1195462849,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1719863407,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":873937731,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems"}},{"HashCode":-751353100,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1988340404,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1911575885,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-545756051,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":1084171635,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1236611684,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2016111296,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":908111765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon"}},{"HashCode":1259045291,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":557046962,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2145509223,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-846396334,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True"}},{"HashCode":-2053065381,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":854991339,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-568376608,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-285227334,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True"}},{"HashCode":-1194363717,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":111088797,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":234827431,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1880242039,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1732423381,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-458822329,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregateColumn>","Documentation":"\n            <summary>\n            Configures the aggregate columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridAggregateColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregate"}},{"HashCode":-123138610,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregateColumn>","Documentation":"\n            <summary>\n            Configures the aggregate columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridAggregateColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-197814668,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregate"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-786484779,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregate"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1919155761,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ColumnName","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to display the aggregate value. If ColumnName is not defined,\n            then Field name value will be assigned to the ColumnName` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to perform aggregation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Format is applied to a calculated value before it is displayed.\n            Gets the format from the user, which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupCaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupCaptionTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupFooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupFooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the aggregate type of a particular column.\n            Types of aggregate supported in-built are,.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Sum\" /></term>\n            <description>Performes sum aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Average\" /></term>\n            <description>Performes average aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Count\" /></term>\n            <description>Performes count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.FalseCount\" /></term>\n            <description>Performes false count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.TrueCount\" /></term>\n            <description>Performes true count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Max\" /></term>\n            <description>Performes max aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Min\" /></term>\n            <description>Performes min aggregation.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn"}},{"HashCode":190582439,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ColumnName","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to display the aggregate value. If ColumnName is not defined,\n            then Field name value will be assigned to the ColumnName` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to perform aggregation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Format is applied to a calculated value before it is displayed.\n            Gets the format from the user, which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupCaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupCaptionTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupFooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupFooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the aggregate type of a particular column.\n            Types of aggregate supported in-built are,.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Sum\" /></term>\n            <description>Performes sum aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Average\" /></term>\n            <description>Performes average aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Count\" /></term>\n            <description>Performes count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.FalseCount\" /></term>\n            <description>Performes false count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.TrueCount\" /></term>\n            <description>Performes true count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Max\" /></term>\n            <description>Performes max aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Min\" /></term>\n            <description>Performes min aggregation.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2145143491,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregateColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1542575943,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":286453850,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":323762596,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1717067733,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaptionTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupCaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1016043022,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaptionTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupCaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-229538453,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupFooterTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupFooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1411383523,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupFooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupFooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1710821523,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate columms.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregateColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumns"}},{"HashCode":1094846026,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate columms.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregateColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2051723337,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregateColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumns","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-307437742,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregateColumns","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":211296765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregates"}},{"HashCode":-1309334663,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":683899195,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":470475608,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridAggregates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":61029993,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columm.\n            </summary>\n            <summary>\n            Configures a grid column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridCommandColumn>"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.IEditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IComparer<global::System.Object>"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FreezeDirection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn"}},{"HashCode":-498384394,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columm.\n            </summary>\n            <summary>\n            Configures a grid column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridCommandColumn>"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.IEditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IComparer<global::System.Object>"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FreezeDirection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1326177624,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1184019107,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":312753964,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1392846662,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1862489681,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1402936022,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-808228528,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1003291190,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":550367799,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1480902114,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1592074510,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1785043289,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1060219979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid column chooser settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the search operator for Column Chooser.\n            By default search operator is <see cref=\"T:Syncfusion.Blazor.Operator\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings"}},{"HashCode":213978015,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid column chooser settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the search operator for Column Chooser.\n            By default search operator is <see cref=\"T:Syncfusion.Blazor.Operator\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":749617740,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1539518237,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1573266239,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":459574472,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1926607486,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumns"}},{"HashCode":-195957379,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":767595625,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumns","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-312077867,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumns","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1976527519,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ButtonOption","TypeName":"Syncfusion.Blazor.Grids.CommandButtonOptions","Documentation":"\n            <summary>\n            Define the button model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ButtonOption","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CommandButtonOptions"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button ID.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.CommandButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Define the command button type.\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>Default. A command button with no default action. Use this for custom command actions.</description>\n            </item>\n            <item>\n            <term>Edit</term>\n            <description>A edit command button that edit current record.</description>\n            </item>\n            <item>\n            <term>Delete</term>\n            <description>A delete command button that delete current record.</description>\n            </item>\n            <item>\n            <term>Save</term>\n            <description>A save command button that saves the current edited record.</description>\n            </item>\n            <item>\n            <term>Cancel</term>\n            <description>A cancel command button that cancels the edit state.</description>\n            </item>\n            </list>\n            </summary>\n            <remarks>\n            To use custom command button, set Type as <see cref=\"F:Syncfusion.Blazor.Grids.CommandButtonType.None\" /> and use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked\" /> event to perform custom action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CommandButtonType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumn"}},{"HashCode":1263231859,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridCommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ButtonOption","TypeName":"Syncfusion.Blazor.Grids.CommandButtonOptions","Documentation":"\n            <summary>\n            Define the button model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ButtonOption","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CommandButtonOptions"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button ID.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.CommandButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Define the command button type.\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>Default. A command button with no default action. Use this for custom command actions.</description>\n            </item>\n            <item>\n            <term>Edit</term>\n            <description>A edit command button that edit current record.</description>\n            </item>\n            <item>\n            <term>Delete</term>\n            <description>A delete command button that delete current record.</description>\n            </item>\n            <item>\n            <term>Save</term>\n            <description>A save command button that saves the current edited record.</description>\n            </item>\n            <item>\n            <term>Cancel</term>\n            <description>A cancel command button that cancels the edit state.</description>\n            </item>\n            </list>\n            </summary>\n            <remarks>\n            To use custom command button, set Type as <see cref=\"F:Syncfusion.Blazor.Grids.CommandButtonType.None\" /> and use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked\" /> event to perform custom action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CommandButtonType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1929056171,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCommandColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":440469600,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridCommandColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-978893924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCommandColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumns"}},{"HashCode":1199266794,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridCommandColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1473245241,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCommandColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumns","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-762653446,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridCommandColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridCommandColumns","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-41713769,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEditSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid edit settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding is set to true, new records can be added to the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowDeleting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowDeleting is set to true, existing record can be deleted from the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDeleting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditOnDblClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditOnDblClick is set to false, Grid will not allow editing of a record on double click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditOnDblClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing is set to true, values can be updated in the existing record.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowNextRowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowNextRowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Dialog","TypeName":"Syncfusion.Blazor.Grids.DialogSettings","Documentation":"\n            <summary>\n            Defines the dialog params to edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dialog","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.DialogSettings"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.EditMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode to edit. The available editing modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Normal</term>\n            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>\n            </item>\n            <item>\n            <term>Dialog</term>\n            <description>Editing is done in a Dialog/Pop component.</description>\n            </item>\n            <item>\n            <term>Batch</term>\n            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditMode"}},{"Kind":"Components.Component","Name":"NewRowPosition","TypeName":"Syncfusion.Blazor.Grids.NewRowPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the position of adding a new row. The available position are:\n            <list type=\"bullet\">\n            <item>\n            <term>Top</term>\n            <description>Default. Add form is placed at the first row of the grid.</description>\n            </item>\n            <item>\n            <term>Bottom</term>\n            <description>Add form is placed at the last row of the grid</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewRowPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.NewRowPosition"}},{"Kind":"Components.Component","Name":"ShowConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowConfirmDialog","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDeleteConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDeleteConfirmDialog","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Validator","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Validator","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings"}},{"HashCode":-141035634,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEditSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid edit settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding is set to true, new records can be added to the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowDeleting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowDeleting is set to true, existing record can be deleted from the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDeleting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditOnDblClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditOnDblClick is set to false, Grid will not allow editing of a record on double click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditOnDblClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing is set to true, values can be updated in the existing record.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowNextRowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowNextRowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Dialog","TypeName":"Syncfusion.Blazor.Grids.DialogSettings","Documentation":"\n            <summary>\n            Defines the dialog params to edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dialog","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.DialogSettings"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.EditMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode to edit. The available editing modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Normal</term>\n            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>\n            </item>\n            <item>\n            <term>Dialog</term>\n            <description>Editing is done in a Dialog/Pop component.</description>\n            </item>\n            <item>\n            <term>Batch</term>\n            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditMode"}},{"Kind":"Components.Component","Name":"NewRowPosition","TypeName":"Syncfusion.Blazor.Grids.NewRowPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the position of adding a new row. The available position are:\n            <list type=\"bullet\">\n            <item>\n            <term>Top</term>\n            <description>Default. Add form is placed at the first row of the grid.</description>\n            </item>\n            <item>\n            <term>Bottom</term>\n            <description>Add form is placed at the last row of the grid</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewRowPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.NewRowPosition"}},{"Kind":"Components.Component","Name":"ShowConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowConfirmDialog","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDeleteConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDeleteConfirmDialog","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Validator","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Validator","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2046702949,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridEditSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1142640932,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1450459043,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-414138035,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-415941605,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":360049491,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-858366695,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-757703818,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1345248643,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Validator","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Validator' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-913392577,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Validator","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Validator' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEditSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-526124284,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any Grid action failed to achieve the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBatchAdd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are added in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchAdd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are deleted in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are saved in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cancel operation is started in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before data is bound to Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBeginEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the record is to be edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeginEdit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cell is being edited.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellEdit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSaved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSaved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a cell is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellDeselecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Metadata":{"Common.PropertyName":"CellDeselected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ColumnMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when click the context menu items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CommandClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when command button is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CommandClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when click on context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DetailDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after detail row expands.\n            &gt; This event triggers at initial expand.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DetailDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Documentation":"\n            <summary>\n            Triggered for stacked header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderCellInfo","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnLoad","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This event allows customization of Grid properties before rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnLoad","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"QueryCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access cell information, element, or data.\n            This will be triggered before the cell element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"QueryCellInfo","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordDoubleClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is double clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordDoubleClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ResizeArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ResizeStopped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize ends.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeStopped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ResizeArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RowDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access row information, element, or data.\n            This will be triggered before the row element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a selected row is deselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before deselecting the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRowDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when row element's drag(move) starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRowDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when row elements are dropped on the target row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a row is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before row selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoving","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised on moving freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoving","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after moved freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnToolbarClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when toolbar item is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnToolbarClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeOpenColumnChooser","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Documentation":"\n            <summary>\n            Triggers when clicked column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeOpenColumnChooser","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPdfExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to PDF document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnPdfExport","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The PdfQueryCellInfoEvent event is triggered every time a data is entered into a cell of the pdf document. So this event is triggered as many times as the data is entered into a cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"PdfHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The PdfHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfHeaderQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Documentation":"\n            <summary>\n            The PdfAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfAggregateTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The PdfGroupCaptionTemplateInfo event is triggered every time a caption template row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfGroupCaptionTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"OnExcelExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to Excel/Csv Sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnExcelExport","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Documentation":"\n            <summary>\n            The ExcelAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelAggregateTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The ExcelGroupCaptionTemplateInfo event is triggered every time a caption template row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelGroupCaptionTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The ExcelQueryCellInfoEvent event is triggered every time a data is entered into a cell of the Excel sheet. So this event is triggered as many times as the data is entered into a cell written in the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ExcelHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The ExcelHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the Excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelHeaderQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExportComplete","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            The ExportComplete event is triggered when exporting process was completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExportComplete","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEvents","Components.GenericTyped":"True"}},{"HashCode":1395859708,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any Grid action failed to achieve the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBatchAdd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are added in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchAdd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are deleted in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are saved in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cancel operation is started in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before data is bound to Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBeginEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the record is to be edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeginEdit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cell is being edited.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellEdit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSaved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSaved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a cell is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellDeselecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Metadata":{"Common.PropertyName":"CellDeselected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ColumnMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when click the context menu items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CommandClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when command button is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CommandClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when click on context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DetailDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after detail row expands.\n            &gt; This event triggers at initial expand.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DetailDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Documentation":"\n            <summary>\n            Triggered for stacked header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderCellInfo","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnLoad","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This event allows customization of Grid properties before rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnLoad","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"QueryCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access cell information, element, or data.\n            This will be triggered before the cell element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"QueryCellInfo","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordDoubleClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is double clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordDoubleClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ResizeArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ResizeStopped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize ends.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeStopped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ResizeArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RowDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access row information, element, or data.\n            This will be triggered before the row element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a selected row is deselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before deselecting the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRowDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when row element's drag(move) starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRowDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when row elements are dropped on the target row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a row is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before row selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoving","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised on moving freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoving","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after moved freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.FreezeLineEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnToolbarClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when toolbar item is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnToolbarClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeOpenColumnChooser","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Documentation":"\n            <summary>\n            Triggers when clicked column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeOpenColumnChooser","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPdfExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to PDF document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnPdfExport","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The PdfQueryCellInfoEvent event is triggered every time a data is entered into a cell of the pdf document. So this event is triggered as many times as the data is entered into a cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"PdfHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The PdfHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfHeaderQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Documentation":"\n            <summary>\n            The PdfAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfAggregateTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The PdfGroupCaptionTemplateInfo event is triggered every time a caption template row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfGroupCaptionTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"OnExcelExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to Excel/Csv Sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnExcelExport","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Documentation":"\n            <summary>\n            The ExcelAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelAggregateTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The ExcelGroupCaptionTemplateInfo event is triggered every time a caption template row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelGroupCaptionTemplateInfo","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The ExcelQueryCellInfoEvent event is triggered every time a data is entered into a cell of the Excel sheet. So this event is triggered as many times as the data is entered into a cell written in the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ExcelHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The ExcelHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the Excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelHeaderQueryCellInfoEvent","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExportComplete","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            The ExportComplete event is triggered when exporting process was completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExportComplete","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1246342949,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of the filter column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If match case set to true, then filter records with exact match or else\n            filter records with case insensitive(uppercase and lowercase letters treated as same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MatchCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the relationship between one filter query and another by using AND or OR predicate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Predicate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the value used to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Object"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumn"}},{"HashCode":1941396682,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of the filter column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If match case set to true, then filter records with exact match or else\n            filter records with case insensitive(uppercase and lowercase letters treated as same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MatchCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the relationship between one filter query and another by using AND or OR predicate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Predicate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the value used to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Object"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1942316642,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":248301374,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-234279342,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumns"}},{"HashCode":-50619680,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1348308330,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumns","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-973404438,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterColumns","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":516743738,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filtering.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridFilterColumn>","Documentation":"\n            <summary>\n            Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.\n            </summary>\n            <remarks>\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridFilterColumn\" /> component\n            to define filter criteria.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridFilterColumn>"}},{"Kind":"Components.Component","Name":"EnableCaseSensitivity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableCaseSensitivity is set to true then searches grid records with exact match based on the filter\n            operator. It will have no effect on number, boolean and Date fields.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaseSensitivity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ImmediateModeDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the time delay (in milliseconds) in filtering records when the Immediate mode of filter bar is set.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImmediateModeDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.FilterBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the filter bar modes. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>OnEnter</term>\n            <description>Initiate filter operation after Enter key is pressed.</description>\n            </item>\n            <item>\n            <term>Immediate</term>\n            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterBarMode"}},{"Kind":"Components.Component","Name":"Operators","TypeName":"System.Object","Documentation":"\n            <summary>\n            The Operators is used to override the default operators in filter menu. This should be defined by type wise\n            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operators","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ShowFilterBarStatus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Shows or hides the filtered status message on the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFilterBarStatus","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for filtering type. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>FilterBar</term>\n            <description>Default. Specifies the filter type as filter bar.</description>\n            </item>\n            <item>\n            <term>Menu</term>\n            <description>Specifies the filter type as menu.</description>\n            </item>\n            <item>\n            <term>CheckBox</term>\n            <description>Specifies the filter type as check box.</description>\n            </item>\n            <item>\n            <term>Excel</term>\n            <description>Specifies the filter type as excel.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterSettings"}},{"HashCode":-2116746348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filtering.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridFilterColumn>","Documentation":"\n            <summary>\n            Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.\n            </summary>\n            <remarks>\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridFilterColumn\" /> component\n            to define filter criteria.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridFilterColumn>"}},{"Kind":"Components.Component","Name":"EnableCaseSensitivity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableCaseSensitivity is set to true then searches grid records with exact match based on the filter\n            operator. It will have no effect on number, boolean and Date fields.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaseSensitivity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ImmediateModeDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the time delay (in milliseconds) in filtering records when the Immediate mode of filter bar is set.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImmediateModeDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.FilterBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the filter bar modes. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>OnEnter</term>\n            <description>Initiate filter operation after Enter key is pressed.</description>\n            </item>\n            <item>\n            <term>Immediate</term>\n            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterBarMode"}},{"Kind":"Components.Component","Name":"Operators","TypeName":"System.Object","Documentation":"\n            <summary>\n            The Operators is used to override the default operators in filter menu. This should be defined by type wise\n            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operators","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ShowFilterBarStatus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Shows or hides the filtered status message on the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFilterBarStatus","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for filtering type. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>FilterBar</term>\n            <description>Default. Specifies the filter type as filter bar.</description>\n            </item>\n            <item>\n            <term>Menu</term>\n            <description>Specifies the filter type as menu.</description>\n            </item>\n            <item>\n            <term>CheckBox</term>\n            <description>Specifies the filter type as check box.</description>\n            </item>\n            <item>\n            <term>Excel</term>\n            <description>Specifies the filter type as excel.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":384798495,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":722554169,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridFilterSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":165557788,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridGroupSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid grouping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid allows the grouped elements to be reordered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CaptionTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the column names to group at initial rendering of the Grid.\n            You can also get the currently grouped columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"DisablePageWiseAggregates","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisablePageWiseAggregates set to true, then the group aggregate value will\n            be calculated from the whole data instead of paged data and two requests will be made for each page\n            when Grid bound with remote service.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisablePageWiseAggregates","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropArea","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDropArea is set to true, the group drop area element will be visible at the top of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropArea","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowGroupedColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowGroupedColumn is set to false, it hides the grouped column after grouping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowGroupedColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowToggleButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowToggleButton set to true, then the toggle button will be showed in the column headers which can be used to group\n            or ungroup columns by clicking them.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowToggleButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowUngroupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowUngroupButton set to false, then ungroup button is hidden in dropped element.\n            It can be used to ungroup the grouped column when click on ungroup button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowUngroupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLazyLoading","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.\n            The child rows of each caption will render only when we expand the captions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableLazyLoading","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings"}},{"HashCode":1032891738,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridGroupSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid grouping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid allows the grouped elements to be reordered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CaptionTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the column names to group at initial rendering of the Grid.\n            You can also get the currently grouped columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"DisablePageWiseAggregates","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisablePageWiseAggregates set to true, then the group aggregate value will\n            be calculated from the whole data instead of paged data and two requests will be made for each page\n            when Grid bound with remote service.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisablePageWiseAggregates","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropArea","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDropArea is set to true, the group drop area element will be visible at the top of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropArea","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowGroupedColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowGroupedColumn is set to false, it hides the grouped column after grouping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowGroupedColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowToggleButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowToggleButton set to true, then the toggle button will be showed in the column headers which can be used to group\n            or ungroup columns by clicking them.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowToggleButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowUngroupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowUngroupButton set to false, then ungroup button is hidden in dropped element.\n            It can be used to ungroup the grouped column when click on ungroup button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowUngroupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLazyLoading","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.\n            The child rows of each caption will render only when we expand the captions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableLazyLoading","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1157713513,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridGroupSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-368885588,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":287886875,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionTemplate","ParentTag":"GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'CaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1050155230,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'CaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridGroupSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-732424407,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridKeySettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures keyboard navigation for grid.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridKeySettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MoveLeftCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the left cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftTab</term>\n            <description>Moves to left cell on pressing Shift+Tab key</description>\n            </item>\n            <item>\n            <term>ArrowLeft</term>\n            <description>Moves to left cell on pressing left arrow key</description>\n            </item>\n            <item>\n            <term>ShiftLeft</term>\n            <description>Moves to left cell on pressing shift+left arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveLeftCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveRightCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the right cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Tab</term>\n            <description>Moves to right cell on pressing Tab key</description>\n            </item>\n            <item>\n            <term>ArrowRight</term>\n            <description>Moves to right cell on pressing right arrow key</description>\n            </item>\n            <item>\n            <term>ShiftRight</term>\n            <description>Moves to right cell on pressing shift+right arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveRightCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveUpCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the up cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftEnter</term>\n            <description>Moves to top cell on pressing Shit+Enter key</description>\n            </item>\n            <item>\n            <term>ArrowUp</term>\n            <description>Moves to top cell on pressing up arrow key</description>\n            </item>\n            <item>\n            <term>ShiftUp</term>\n            <description>Moves to top cell on pressing shift+up arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveUpCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveDownCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the down cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Enter</term>\n            <description>Moves to down cell on pressing Enter key</description>\n            </item>\n            <item>\n            <term>ArrowDown</term>\n            <description>Moves to down cell on pressing down arrow key</description>\n            </item>\n            <item>\n            <term>ShiftDown</term>\n            <description>Moves to down cell on pressing shift+down arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveDownCell","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridKeySettings"}},{"HashCode":-1379908003,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridKeySettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures keyboard navigation for grid.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridKeySettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MoveLeftCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the left cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftTab</term>\n            <description>Moves to left cell on pressing Shift+Tab key</description>\n            </item>\n            <item>\n            <term>ArrowLeft</term>\n            <description>Moves to left cell on pressing left arrow key</description>\n            </item>\n            <item>\n            <term>ShiftLeft</term>\n            <description>Moves to left cell on pressing shift+left arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveLeftCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveRightCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the right cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Tab</term>\n            <description>Moves to right cell on pressing Tab key</description>\n            </item>\n            <item>\n            <term>ArrowRight</term>\n            <description>Moves to right cell on pressing right arrow key</description>\n            </item>\n            <item>\n            <term>ShiftRight</term>\n            <description>Moves to right cell on pressing shift+right arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveRightCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveUpCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the up cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftEnter</term>\n            <description>Moves to top cell on pressing Shit+Enter key</description>\n            </item>\n            <item>\n            <term>ArrowUp</term>\n            <description>Moves to top cell on pressing up arrow key</description>\n            </item>\n            <item>\n            <term>ShiftUp</term>\n            <description>Moves to top cell on pressing shift+up arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveUpCell","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MoveDownCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the down cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Enter</term>\n            <description>Moves to down cell on pressing Enter key</description>\n            </item>\n            <item>\n            <term>ArrowDown</term>\n            <description>Moves to down cell on pressing down arrow key</description>\n            </item>\n            <item>\n            <term>ShiftDown</term>\n            <description>Moves to down cell on pressing shift+down arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveDownCell","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridKeySettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":749005384,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridPageSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid paging.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableQueryString","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableQueryString set to true,\n            then it pass current page information as a query string along with the URL while navigating to other page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableQueryString","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PageCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to be displayed in the pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of records to be displayed per page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or Array of values,\n            It renders DropDownList in the pager which allow us to select pageSize from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings"}},{"HashCode":-1179583328,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridPageSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid paging.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableQueryString","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableQueryString set to true,\n            then it pass current page information as a query string along with the URL while navigating to other page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableQueryString","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PageCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to be displayed in the pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of records to be displayed per page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or Array of values,\n            It renders DropDownList in the pager which allow us to select pageSize from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-12500323,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridPageSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-507987837,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridPageSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1168925219,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1916299095,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridPageSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":566855769,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridRowDropSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid row drag and drop.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRowDropSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the ID of droppable component on which row drop should occur.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TargetID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridRowDropSettings"}},{"HashCode":552621471,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridRowDropSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid row drag and drop.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridRowDropSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the ID of droppable component on which row drop should occur.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TargetID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridRowDropSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2119952716,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSearchSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid searching.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSearchSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Fields","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <remarks>Ignore accent is supported by remote data alone.\n            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IgnoreCase is set to false, searches records that match exactly, else\n            searches records that are case insensitive(uppercase and lowercase letters treated the same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the key value to search Grid records at initial rendering.\n            You can also get the current search key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to search records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSearchSettings"}},{"HashCode":338207965,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSearchSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid searching.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSearchSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Fields","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <remarks>Ignore accent is supported by remote data alone.\n            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IgnoreCase is set to false, searches records that match exactly, else\n            searches records that are case insensitive(uppercase and lowercase letters treated the same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the key value to search Grid records at initial rendering.\n            You can also get the current search key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to search records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Operator"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSearchSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1624094056,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSelectionSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid selection.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CellSelectionMode","TypeName":"Syncfusion.Blazor.Grids.CellSelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            The cell selection modes are flow and box.\n            It requires the <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode\" /> to be either cell or both.\n            <list type=\"bullet\">\n            <item>\n            <term>Flow</term>\n            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>\n            </item>\n            <item>\n            <term>Box</term>\n            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelectionMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CellSelectionMode"}},{"Kind":"Components.Component","Name":"CheckboxMode","TypeName":"Syncfusion.Blazor.Grids.CheckboxSelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for checkbox selection Mode. They are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Default</term>\n            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>\n            </item>\n            <item>\n            <term>ResetOnRowClick</term>\n            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple\n             rows can be selected by using CTRL or SHIFT key.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CheckboxSelectionType"}},{"Kind":"Components.Component","Name":"CheckboxOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If CheckboxOnly set to true, then the Grid selection is allowed only through checkbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSimpleMultiRowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableSimpleMultiRowSelection set to true, then the user can able to perform multiple row selection with single clicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSimpleMultiRowSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableToggle set to true, then the user can able to perform toggle for the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the selection mode. Available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Row</term>\n            <description>Default. Row selection is enabled</description>\n            </item>\n            <item>\n            <term>Cell</term>\n            <description>Cell selection is enabled.</description>\n            </item>\n            <item>\n            <term>Both</term>\n            <description>Both Row and Cell selection is enabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SelectionMode"}},{"Kind":"Components.Component","Name":"PersistSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If PersistSelection set to true, then the Grid selection is persisted on all operations.\n            For persisting selection in the Grid, any one of the column must be enabled as a primary key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for selection type. They are.\n            <list type=\"bullet\">\n            <item>\n            <term>Single</term>\n            <description>Default. Allows selection of only a row or a cell.</description>\n            </item>\n            <item>\n            <term>Multiple</term>\n            <description>Allows user to select a multiple rows or cells.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SelectionType"}},{"Kind":"Components.Component","Name":"AllowDragSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.\n            </summary>\n            <value>\n            <c>true</c>, if the row and cell selection enabled when dragging mouse. Otherwise, false.\n            </value>\n            <remarks>\n            To perform drag selection in blazor grid, set <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type\" /> as should be <c>Multiple</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSelectionSettings"}},{"HashCode":-985711195,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSelectionSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid selection.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CellSelectionMode","TypeName":"Syncfusion.Blazor.Grids.CellSelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            The cell selection modes are flow and box.\n            It requires the <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode\" /> to be either cell or both.\n            <list type=\"bullet\">\n            <item>\n            <term>Flow</term>\n            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>\n            </item>\n            <item>\n            <term>Box</term>\n            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelectionMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CellSelectionMode"}},{"Kind":"Components.Component","Name":"CheckboxMode","TypeName":"Syncfusion.Blazor.Grids.CheckboxSelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for checkbox selection Mode. They are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Default</term>\n            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>\n            </item>\n            <item>\n            <term>ResetOnRowClick</term>\n            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple\n             rows can be selected by using CTRL or SHIFT key.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.CheckboxSelectionType"}},{"Kind":"Components.Component","Name":"CheckboxOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If CheckboxOnly set to true, then the Grid selection is allowed only through checkbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSimpleMultiRowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableSimpleMultiRowSelection set to true, then the user can able to perform multiple row selection with single clicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSimpleMultiRowSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableToggle set to true, then the user can able to perform toggle for the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the selection mode. Available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Row</term>\n            <description>Default. Row selection is enabled</description>\n            </item>\n            <item>\n            <term>Cell</term>\n            <description>Cell selection is enabled.</description>\n            </item>\n            <item>\n            <term>Both</term>\n            <description>Both Row and Cell selection is enabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SelectionMode"}},{"Kind":"Components.Component","Name":"PersistSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If PersistSelection set to true, then the Grid selection is persisted on all operations.\n            For persisting selection in the Grid, any one of the column must be enabled as a primary key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for selection type. They are.\n            <list type=\"bullet\">\n            <item>\n            <term>Single</term>\n            <description>Default. Allows selection of only a row or a cell.</description>\n            </item>\n            <item>\n            <term>Multiple</term>\n            <description>Allows user to select a multiple rows or cells.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SelectionType"}},{"Kind":"Components.Component","Name":"AllowDragSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.\n            </summary>\n            <value>\n            <c>true</c>, if the row and cell selection enabled when dragging mouse. Otherwise, false.\n            </value>\n            <remarks>\n            To perform drag selection in blazor grid, set <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type\" /> as should be <c>Multiple</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSelectionSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1992002376,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Grids.SortDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the direction of sort column. Available directions are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Ascending</term>\n            <description>Default. Sorts records in ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>Sorts records in descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SortDirection"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of sort column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFromGroup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the sorted column whether or from grouping operation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFromGroup","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumn"}},{"HashCode":-168622855,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Grids.SortDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the direction of sort column. Available directions are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Ascending</term>\n            <description>Default. Sorts records in ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>Sorts records in descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SortDirection"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of sort column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFromGroup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the sorted column whether or from grouping operation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFromGroup","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumn","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-82788486,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumns"}},{"HashCode":1856243029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1437672524,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridSortColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumns","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-875844122,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridSortColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortColumns","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2074117303,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sorting.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowUnsort","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowUnsort set to false the user can not get the grid in unsorted state by clicking the sorted column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowUnsort","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridSortColumn>","Documentation":"\n            <summary>\n            Specifies the columns to sort at initial rendering of Grid.\n            Also user can get current sorted columns, use <see cref=\"T:Syncfusion.Blazor.Grids.GridSortColumn\" /> component\n            to set initial sort columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridSortColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortSettings"}},{"HashCode":847995561,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sorting.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowUnsort","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowUnsort set to false the user can not get the grid in unsorted state by clicking the sorted column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowUnsort","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridSortColumn>","Documentation":"\n            <summary>\n            Specifies the columns to sort at initial rendering of Grid.\n            Also user can get current sorted columns, use <see cref=\"T:Syncfusion.Blazor.Grids.GridSortColumn\" /> component\n            to set initial sort columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridSortColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-78374003,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridSortSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-519505294,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridSortSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridSortSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":747104418,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTemplates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid templates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"RowTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"RowTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DetailTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EmptyRecordTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EmptyRecordTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ToolbarTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ToolbarTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates"}},{"HashCode":795643635,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTemplates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid templates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"RowTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"RowTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DetailTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EmptyRecordTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EmptyRecordTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ToolbarTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ToolbarTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1259937252,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1416011232,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-863006021,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'RowTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1377816258,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'RowTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1652111527,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DetailTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":343042220,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DetailTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2122020436,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyRecordTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyRecordTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":302776160,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyRecordTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyRecordTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1984723542,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ToolbarTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1782002161,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ToolbarTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":250009887,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTextWrapSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid text wrapping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridTextWrapSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"WrapMode","TypeName":"Syncfusion.Blazor.Grids.WrapMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the WrapMode` of the Grid. The available modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Default. Wraps both header and content.</description>\n            </item>\n            <item>\n            <term>Header</term>\n            <description>Wraps header alone.</description>\n            </item>\n            <item>\n            <term>Content</term>\n            <description>Wraps content alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WrapMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.WrapMode"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTextWrapSettings"}},{"HashCode":1676355127,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTextWrapSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid text wrapping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridTextWrapSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"WrapMode","TypeName":"Syncfusion.Blazor.Grids.WrapMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the WrapMode` of the Grid. The available modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Default. Wraps both header and content.</description>\n            </item>\n            <item>\n            <term>Header</term>\n            <description>Wraps header alone.</description>\n            </item>\n            <item>\n            <term>Content</term>\n            <description>Wraps content alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WrapMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.WrapMode"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridTextWrapSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1216968380,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Blazor Grid component displays tabular data and it has in-built support for various data binding, editing,\n            sorting and filtering.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides schema for the grid component.\n            </typeparam>\n            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.\n            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>\n            <seealso cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.SfGrid<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"UnMatchedAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Catches unmatched attributes from the component.\n            This can be used to specify custom style, class and other attributes to the grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnMatchedAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Aggregates","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregate>","Documentation":"\n            <summary>\n            Gets the Grid aggregate rows. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridAggregates\" /> component to configure\n            aggregate rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Aggregates","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridAggregate>"}},{"Kind":"Components.Component","Name":"AllowExcelExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowExcelExport set to true, then it will allow the user to export grid to Excel file.\n            </summary>\n            <remarks>\n            To perform excel export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowExcelExport","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to true the filter bar will be displayed for all columns.\n            If set to false the filter bar will not be displayed.\n            Filter bar allows the user to filter grid records with required criteria.\n            </summary>\n            <remarks>\n            Filter type  can be changed from filterbar using <see cref=\"P:Syncfusion.Blazor.Grids.GridFilterSettings.Type\" /> property.\n            Filter can be disabled for particular column by using  <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering\" />.\n            <seealso cref=\"T:Syncfusion.Blazor.Grids.FilterType\" />\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to true, then it will allow the user to dynamically group or ungroup columns.\n            Grouping can be done by drag and drop columns from column header to group drop area.\n            </summary>\n            <remarks>\n            Grouping can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridGroupSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowMultiSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowMultiSorting set to true, then it will allow the user to sort multiple column in the grid.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting\" /> must be true to use this property.\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowPaging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPaging is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.\n            </summary>\n            <remarks>\n            Paging can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridPageSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPaging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowPdfExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPdfExport set to true, then it will allow the user to export grid to Pdf file.\n            </summary>\n            <remarks>\n            To perform pdf export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPdfExport","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid columns can be reordered.\n            Reordering can be done by drag and drop of a particular column from one index to another index.\n            </summary>\n            <remarks>\n            If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing is set to true, Grid columns can be resized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowRowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowRowDragAndDrop is set to true, you can drag and drop grid rows at another or within grid.\n            </summary>\n            <remarks>\n            To drag and drop rows between grids or to another component, <see cref=\"P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID\" /> property should be provided\n            with the ID of the target grid or any other component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowRowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSelection is set to true, it allows selection of (highlight row) Grid records by clicking it.\n            </summary>\n            <remarks>\n            Selection can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSelectionSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting is set to true, it allows sorting of grid records when column header is clicked.\n            </summary>\n            <remarks>\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowTextWrap set to true,\n            then text content will wrap to the next line when its text content exceeds the width of the Column Cells.\n            </summary>\n            <remarks>\n            Text wrap can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridTextWrapSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n             Defines the mode of clip. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Clip</term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term>Ellipsis</term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term>EllipsisWithTooltip</term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"ColumnChooserSettings","TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Documentation":"\n            <summary>\n            Configures the column chooser in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnChooserSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumnChooserSettings"}},{"Kind":"Components.Component","Name":"KeySettings","TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Documentation":"\n            <summary>\n            Configures the cell movement keys in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeySettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridKeySettings"}},{"Kind":"Components.Component","Name":"ColumnMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ColumnMenuItems defines both built-in and custom column menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              Filter - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItems","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ColumnQueryMode","TypeName":"Syncfusion.Blazor.Grids.ColumnQueryModeType","IsEnum":true,"Documentation":"\n            <summary>\n            ColumnQueryModeprovides options to retrive data from the datasource.\n            <list type=\"bullet\">\n            <item>\n            <term>All</term>\n            <description>It retrives whole data source</description>\n            </item>\n            <item>\n            <term>Schema</term>\n            <description>Retrives data for all the defined columns in grid from the data source.</description>\n            </item>\n            <item>\n            <term>ExcludeHidden</term>\n            <description>Retrives data only for visible columns of grid from the data source.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnQueryMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnQueryModeType"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Defines the schema of data source. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridColumns\" /> to add grid columns.\n            If the Columns declaration is empty or undefined then the columns are automatically generated from data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"ContextMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ContextMenuItems defines both built-in and custom context menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              Edit - Edit the current record.\n              Delete - Delete the current record.\n              Save - Save the edited record.\n              Cancel - Cancel the edited state.\n              Copy - Copy the selected records.\n              PdfExport - Export the grid as Pdf format.\n              ExcelExport - Export the grid as Excel format.\n              CsvExport - Export the grid as CSV format.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              FirstPage - Go to the first page.\n              PrevPage - Go to the previous page.\n              LastPage - Go to the last page.\n              NextPage - Go to the next page.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItems","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"CurrentAction","TypeName":"Syncfusion.Blazor.Grids.ActionArgs","Documentation":"\n            <summary>\n            Gets or sets the current action details.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentAction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ActionArgs"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Provides the data source for rendering grid rows. The data source value can be of any type\n            that implements IEnumerable.\n            </summary>\n            <remarks>\n            To consume data from remote service or custom adaptor,\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component has to be used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.IEnumerable<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EnableAdaptiveUI","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Render the Grid component as Adaptive mode based on Parent element. Also, it's render's the Grid filter, sorting and editing dialogs adaptively\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAdaptiveUI","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AdaptiveUIMode","TypeName":"Syncfusion.Blazor.Grids.AdaptiveMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the Adaptive mode in grid. Setting this as both will render adaptive layout for both mobile and desktop, for Mobile - render adaptive layout only for smaller devices, for Desktop - render adaptive layout only for desktop. Also, it render's the Grid filter, sorting and editing dialogs adaptively.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdaptiveUIMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.AdaptiveMode"}},{"Kind":"Components.Component","Name":"EditSettings","TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Documentation":"\n            <summary>\n            Configures the edit settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridEditSettings"}},{"Kind":"Components.Component","Name":"EnableAltRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAltRow is set to true, the grid will render with e-altrow CSS class to the alternative tr elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAltRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableAutoFill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAutoFill is set to true, then the auto fill icon will displayed on cell selection for copy cells.\n            It requires the selection mode to be Cell and CellSelectionMode to be Box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAutoFill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableColumnVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableColumnVirtualization set to true, then the Grid will render only the columns visible within the view-port\n            and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableColumnVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableHeaderFocus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHeaderFocus set to true, then header element will be focused when focus moves to grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHeaderFocus","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualMaskRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableMastRow set to true the Masked row append in the DOM elements.\n            If set to false default virtual scrolling will work while enabling Enable Virtualization.\n            In this feature Masked cells displayed until data cells retrieve.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualMaskRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHover is set to true, the row hover is enabled in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <remarks>\n            Enabling this property will store the grid state such as column order, column width, sort information etc in the\n            window.localStorage when the component is disposed.\n            Users can also store grid state in data base instead of window.localStorage by using <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableStickyHeader","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Sets the grid headers will be sticky, while scrolling the Grid's Parent div element.\n             </summary>\n             <value>\n             <b>true</b> then the user can able to make the column headers visible, when the document is scrolled; otherwise, <b>false</b>. By default, the property value is false.\n             </value>\n             <example>\n             <code><![CDATA[\n            <SfGrid EnableStickyHeader=true>\n             ......\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"EnableStickyHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableVirtualization set to true, then the Grid will render only the rows visible within the view-port\n            and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Documentation":"\n            <summary>\n            Configures the filter settings of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridFilterSettings"}},{"Kind":"Components.Component","Name":"FrozenColumns","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen columns.\n            </summary>\n            <remarks>Specific column can be frozen using <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen\" /> property.</remarks>\n        ","Metadata":{"Common.PropertyName":"FrozenColumns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowFreezeLineMoving","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets whether allow the user to move the frozen line by dragging and dropping it.\n             </summary>\n             <value>\n             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.\n             </value>\n             <remarks>\n             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.\n             </remarks>\n             <example>\n             <code><![CDATA[\n            <SfGrid AllowFreezeLineMoving=true FrozenColumns=\"2\" Height=\"500\" Width=\"500\">\n             ..\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"AllowFreezeLineMoving","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FrozenRows","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FrozenRows","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"GridLines","TypeName":"Syncfusion.Blazor.Grids.GridLine","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode of grid lines. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Displays both the horizontal and vertical grid lines.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>No grid lines are displayed.</description>\n            </item>\n            <item>\n            <term>Horizontal</term>\n            <description>Displays the horizontal grid lines only.</description>\n            </item>\n            <item>\n            <term>Vertical</term>\n            <description>Displays grid lines based on the theme.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GridLines","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridLine"}},{"Kind":"Components.Component","Name":"GroupSettings","TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Documentation":"\n            <summary>\n            Configures the group settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridGroupSettings"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the scrollable height of the grid content.\n            </summary>\n            <remarks>\n            Height can be assigned with pixel and percentage values such as 100px, 100% etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HierarchyPrintMode","TypeName":"Syncfusion.Blazor.Grids.HierarchyGridPrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the hierarchy grid print modes. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>Expanded</term>\n            <description>Prints the master grid with expanded child grids.</description>\n            </item>\n            <item>\n            <term>All</term>\n            <description>Prints the master grid with all the child grids.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>Prints the master grid alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HierarchyPrintMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.HierarchyGridPrintMode"}},{"Kind":"Components.Component","Name":"PageSettings","TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Documentation":"\n            <summary>\n            Configures the pager in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridPageSettings"}},{"Kind":"Components.Component","Name":"PrintMode","TypeName":"Syncfusion.Blazor.Grids.PrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the print modes. The available print modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>AllPages</term>\n            <description>Print all pages records of the Grid.</description>\n            </item>\n            <item>\n            <term>CurrentPage</term>\n            <description>Print current page records of the Grid.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrintMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.PrintMode"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Defines the external Query\n            that will be executed along with data processing.\n            </summary>\n            <remarks>\n            Additional parameters can be send along with request\n            by using <see cref=\"M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"RowDropSettings","TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Documentation":"\n            <summary>\n            Configures the row drop settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridRowDropSettings"}},{"Kind":"Components.Component","Name":"RowHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the height of Grid rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RowRenderingMode","TypeName":"Syncfusion.Blazor.Grids.RowDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the row rendering mode in grid. Setting this in vertical mode will render rows vertically with headers in the same row which suits better to use grid in small screens. In vertical row rendering mode, limited features are supported like filtering,sorting, Dialog editing, Selection, Searching and Row virtualization. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowRenderingMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.RowDirection"}},{"Kind":"Components.Component","Name":"SearchSettings","TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Documentation":"\n            <summary>\n            Configures the search behavior in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SearchSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSearchSettings"}},{"Kind":"Components.Component","Name":"SelectedRowIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            The SelectedRowIndex allows you to select a row at initial rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedRowIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"SelectionSettings","TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Documentation":"\n            <summary>\n            Configures the selection settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectionSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSelectionSettings"}},{"Kind":"Components.Component","Name":"ShowColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnChooser is set to true, it allows you to dynamically show or hide columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to true, then it will enable the column menu options in each columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortSettings","TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Documentation":"\n            <summary>\n            Configures the sort settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSortSettings"}},{"Kind":"Components.Component","Name":"TextWrapSettings","TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Documentation":"\n            <summary>\n            Configures the text wrap in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextWrapSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridTextWrapSettings"}},{"Kind":"Components.Component","Name":"Toolbar","TypeName":"System.Object","Documentation":"\n            <summary>\n            Toolbar defines the ToolBar items of the Grid.\n            It contains built-in and custom toolbar items.\n            </summary>\n            <remarks>\n            If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n            In some cases user may want to use custom toolbar instead of custom item, in such cases user can use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate\" /> property to provide custom toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Toolbar","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the Grid width.\n            </summary>\n            <remarks>\n            Width can be assigned with pixel and percentage values such as 100px, 100% etc.\n            When the sum of total column width exceeds this value then the browser horizontal scrollbar will be displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid","Components.GenericTyped":"True"}},{"HashCode":-117935124,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Blazor Grid component displays tabular data and it has in-built support for various data binding, editing,\n            sorting and filtering.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides schema for the grid component.\n            </typeparam>\n            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.\n            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>\n            <seealso cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.SfGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.SfGrid<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"UnMatchedAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Catches unmatched attributes from the component.\n            This can be used to specify custom style, class and other attributes to the grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnMatchedAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Aggregates","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregate>","Documentation":"\n            <summary>\n            Gets the Grid aggregate rows. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridAggregates\" /> component to configure\n            aggregate rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Aggregates","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridAggregate>"}},{"Kind":"Components.Component","Name":"AllowExcelExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowExcelExport set to true, then it will allow the user to export grid to Excel file.\n            </summary>\n            <remarks>\n            To perform excel export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowExcelExport","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to true the filter bar will be displayed for all columns.\n            If set to false the filter bar will not be displayed.\n            Filter bar allows the user to filter grid records with required criteria.\n            </summary>\n            <remarks>\n            Filter type  can be changed from filterbar using <see cref=\"P:Syncfusion.Blazor.Grids.GridFilterSettings.Type\" /> property.\n            Filter can be disabled for particular column by using  <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering\" />.\n            <seealso cref=\"T:Syncfusion.Blazor.Grids.FilterType\" />\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to true, then it will allow the user to dynamically group or ungroup columns.\n            Grouping can be done by drag and drop columns from column header to group drop area.\n            </summary>\n            <remarks>\n            Grouping can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridGroupSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowMultiSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowMultiSorting set to true, then it will allow the user to sort multiple column in the grid.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting\" /> must be true to use this property.\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowPaging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPaging is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.\n            </summary>\n            <remarks>\n            Paging can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridPageSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPaging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowPdfExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPdfExport set to true, then it will allow the user to export grid to Pdf file.\n            </summary>\n            <remarks>\n            To perform pdf export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPdfExport","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid columns can be reordered.\n            Reordering can be done by drag and drop of a particular column from one index to another index.\n            </summary>\n            <remarks>\n            If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing is set to true, Grid columns can be resized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowRowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowRowDragAndDrop is set to true, you can drag and drop grid rows at another or within grid.\n            </summary>\n            <remarks>\n            To drag and drop rows between grids or to another component, <see cref=\"P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID\" /> property should be provided\n            with the ID of the target grid or any other component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowRowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSelection is set to true, it allows selection of (highlight row) Grid records by clicking it.\n            </summary>\n            <remarks>\n            Selection can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSelectionSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting is set to true, it allows sorting of grid records when column header is clicked.\n            </summary>\n            <remarks>\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowTextWrap set to true,\n            then text content will wrap to the next line when its text content exceeds the width of the Column Cells.\n            </summary>\n            <remarks>\n            Text wrap can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridTextWrapSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n             Defines the mode of clip. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Clip</term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term>Ellipsis</term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term>EllipsisWithTooltip</term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"ColumnChooserSettings","TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Documentation":"\n            <summary>\n            Configures the column chooser in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnChooserSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumnChooserSettings"}},{"Kind":"Components.Component","Name":"KeySettings","TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Documentation":"\n            <summary>\n            Configures the cell movement keys in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeySettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridKeySettings"}},{"Kind":"Components.Component","Name":"ColumnMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ColumnMenuItems defines both built-in and custom column menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              Filter - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItems","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ColumnQueryMode","TypeName":"Syncfusion.Blazor.Grids.ColumnQueryModeType","IsEnum":true,"Documentation":"\n            <summary>\n            ColumnQueryModeprovides options to retrive data from the datasource.\n            <list type=\"bullet\">\n            <item>\n            <term>All</term>\n            <description>It retrives whole data source</description>\n            </item>\n            <item>\n            <term>Schema</term>\n            <description>Retrives data for all the defined columns in grid from the data source.</description>\n            </item>\n            <item>\n            <term>ExcludeHidden</term>\n            <description>Retrives data only for visible columns of grid from the data source.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnQueryMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnQueryModeType"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Defines the schema of data source. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridColumns\" /> to add grid columns.\n            If the Columns declaration is empty or undefined then the columns are automatically generated from data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"ContextMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ContextMenuItems defines both built-in and custom context menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              Edit - Edit the current record.\n              Delete - Delete the current record.\n              Save - Save the edited record.\n              Cancel - Cancel the edited state.\n              Copy - Copy the selected records.\n              PdfExport - Export the grid as Pdf format.\n              ExcelExport - Export the grid as Excel format.\n              CsvExport - Export the grid as CSV format.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              FirstPage - Go to the first page.\n              PrevPage - Go to the previous page.\n              LastPage - Go to the last page.\n              NextPage - Go to the next page.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItems","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"CurrentAction","TypeName":"Syncfusion.Blazor.Grids.ActionArgs","Documentation":"\n            <summary>\n            Gets or sets the current action details.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentAction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ActionArgs"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Provides the data source for rendering grid rows. The data source value can be of any type\n            that implements IEnumerable.\n            </summary>\n            <remarks>\n            To consume data from remote service or custom adaptor,\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component has to be used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.IEnumerable<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EnableAdaptiveUI","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Render the Grid component as Adaptive mode based on Parent element. Also, it's render's the Grid filter, sorting and editing dialogs adaptively\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAdaptiveUI","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AdaptiveUIMode","TypeName":"Syncfusion.Blazor.Grids.AdaptiveMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the Adaptive mode in grid. Setting this as both will render adaptive layout for both mobile and desktop, for Mobile - render adaptive layout only for smaller devices, for Desktop - render adaptive layout only for desktop. Also, it render's the Grid filter, sorting and editing dialogs adaptively.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdaptiveUIMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.AdaptiveMode"}},{"Kind":"Components.Component","Name":"EditSettings","TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Documentation":"\n            <summary>\n            Configures the edit settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridEditSettings"}},{"Kind":"Components.Component","Name":"EnableAltRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAltRow is set to true, the grid will render with e-altrow CSS class to the alternative tr elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAltRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableAutoFill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAutoFill is set to true, then the auto fill icon will displayed on cell selection for copy cells.\n            It requires the selection mode to be Cell and CellSelectionMode to be Box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAutoFill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableColumnVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableColumnVirtualization set to true, then the Grid will render only the columns visible within the view-port\n            and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableColumnVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableHeaderFocus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHeaderFocus set to true, then header element will be focused when focus moves to grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHeaderFocus","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualMaskRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableMastRow set to true the Masked row append in the DOM elements.\n            If set to false default virtual scrolling will work while enabling Enable Virtualization.\n            In this feature Masked cells displayed until data cells retrieve.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualMaskRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHover is set to true, the row hover is enabled in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <remarks>\n            Enabling this property will store the grid state such as column order, column width, sort information etc in the\n            window.localStorage when the component is disposed.\n            Users can also store grid state in data base instead of window.localStorage by using <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableStickyHeader","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Sets the grid headers will be sticky, while scrolling the Grid's Parent div element.\n             </summary>\n             <value>\n             <b>true</b> then the user can able to make the column headers visible, when the document is scrolled; otherwise, <b>false</b>. By default, the property value is false.\n             </value>\n             <example>\n             <code><![CDATA[\n            <SfGrid EnableStickyHeader=true>\n             ......\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"EnableStickyHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableVirtualization set to true, then the Grid will render only the rows visible within the view-port\n            and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Documentation":"\n            <summary>\n            Configures the filter settings of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridFilterSettings"}},{"Kind":"Components.Component","Name":"FrozenColumns","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen columns.\n            </summary>\n            <remarks>Specific column can be frozen using <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen\" /> property.</remarks>\n        ","Metadata":{"Common.PropertyName":"FrozenColumns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowFreezeLineMoving","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets whether allow the user to move the frozen line by dragging and dropping it.\n             </summary>\n             <value>\n             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.\n             </value>\n             <remarks>\n             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.\n             </remarks>\n             <example>\n             <code><![CDATA[\n            <SfGrid AllowFreezeLineMoving=true FrozenColumns=\"2\" Height=\"500\" Width=\"500\">\n             ..\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"AllowFreezeLineMoving","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FrozenRows","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FrozenRows","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"GridLines","TypeName":"Syncfusion.Blazor.Grids.GridLine","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode of grid lines. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Displays both the horizontal and vertical grid lines.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>No grid lines are displayed.</description>\n            </item>\n            <item>\n            <term>Horizontal</term>\n            <description>Displays the horizontal grid lines only.</description>\n            </item>\n            <item>\n            <term>Vertical</term>\n            <description>Displays grid lines based on the theme.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GridLines","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridLine"}},{"Kind":"Components.Component","Name":"GroupSettings","TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Documentation":"\n            <summary>\n            Configures the group settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridGroupSettings"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the scrollable height of the grid content.\n            </summary>\n            <remarks>\n            Height can be assigned with pixel and percentage values such as 100px, 100% etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HierarchyPrintMode","TypeName":"Syncfusion.Blazor.Grids.HierarchyGridPrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the hierarchy grid print modes. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>Expanded</term>\n            <description>Prints the master grid with expanded child grids.</description>\n            </item>\n            <item>\n            <term>All</term>\n            <description>Prints the master grid with all the child grids.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>Prints the master grid alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HierarchyPrintMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.HierarchyGridPrintMode"}},{"Kind":"Components.Component","Name":"PageSettings","TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Documentation":"\n            <summary>\n            Configures the pager in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridPageSettings"}},{"Kind":"Components.Component","Name":"PrintMode","TypeName":"Syncfusion.Blazor.Grids.PrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the print modes. The available print modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>AllPages</term>\n            <description>Print all pages records of the Grid.</description>\n            </item>\n            <item>\n            <term>CurrentPage</term>\n            <description>Print current page records of the Grid.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrintMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.PrintMode"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Defines the external Query\n            that will be executed along with data processing.\n            </summary>\n            <remarks>\n            Additional parameters can be send along with request\n            by using <see cref=\"M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"RowDropSettings","TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Documentation":"\n            <summary>\n            Configures the row drop settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridRowDropSettings"}},{"Kind":"Components.Component","Name":"RowHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the height of Grid rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RowRenderingMode","TypeName":"Syncfusion.Blazor.Grids.RowDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the row rendering mode in grid. Setting this in vertical mode will render rows vertically with headers in the same row which suits better to use grid in small screens. In vertical row rendering mode, limited features are supported like filtering,sorting, Dialog editing, Selection, Searching and Row virtualization. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowRenderingMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.RowDirection"}},{"Kind":"Components.Component","Name":"SearchSettings","TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Documentation":"\n            <summary>\n            Configures the search behavior in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SearchSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSearchSettings"}},{"Kind":"Components.Component","Name":"SelectedRowIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            The SelectedRowIndex allows you to select a row at initial rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedRowIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"SelectionSettings","TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Documentation":"\n            <summary>\n            Configures the selection settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectionSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSelectionSettings"}},{"Kind":"Components.Component","Name":"ShowColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnChooser is set to true, it allows you to dynamically show or hide columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to true, then it will enable the column menu options in each columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortSettings","TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Documentation":"\n            <summary>\n            Configures the sort settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridSortSettings"}},{"Kind":"Components.Component","Name":"TextWrapSettings","TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Documentation":"\n            <summary>\n            Configures the text wrap in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextWrapSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridTextWrapSettings"}},{"Kind":"Components.Component","Name":"Toolbar","TypeName":"System.Object","Documentation":"\n            <summary>\n            Toolbar defines the ToolBar items of the Grid.\n            It contains built-in and custom toolbar items.\n            </summary>\n            <remarks>\n            If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n            In some cases user may want to use custom toolbar instead of custom item, in such cases user can use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate\" /> property to provide custom toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Toolbar","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the Grid width.\n            </summary>\n            <remarks>\n            Width can be assigned with pixel and percentage values such as 100px, 100% etc.\n            When the sum of total column width exceeds this value then the browser horizontal scrollbar will be displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1077545792,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfGrid"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1297492037,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.SfGrid"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":352916566,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItem","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Documentation":"\n            <summary>\n            Specifies the grid column\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"IsSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies that the checkbox is select all.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItem","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItem"}},{"HashCode":-960645043,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItem","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Documentation":"\n            <summary>\n            Specifies the grid column\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"IsSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies that the checkbox is select all.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItem","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":725379446,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserItemGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the group title for the checkbox collections. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItemGroup"}},{"HashCode":534232411,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the group title for the checkbox collections. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItemGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1926438124,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumnChooserItemGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItemGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":82572779,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridColumnChooserItemGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1388737109,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridForeignColumn<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ForeignDataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Defines the column data source  which will act as foreign data source.\n            </summary>\n            <remarks>List or any IEnumerable type value is accepted as foreign data source.\n            For custom binding or using remote service as foreign data source use\n            <see cref=\"T:Syncfusion.Blazor.Grids.GridForeignColumn`1\" /> component and configure data source using\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />.</remarks>\n        ","Metadata":{"Common.PropertyName":"ForeignDataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridCommandColumn>"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.IEditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IComparer<global::System.Object>"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FreezeDirection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.GenericTyped":"True"}},{"HashCode":-1887622599,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridForeignColumn<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ForeignDataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Defines the column data source  which will act as foreign data source.\n            </summary>\n            <remarks>List or any IEnumerable type value is accepted as foreign data source.\n            For custom binding or using remote service as foreign data source use\n            <see cref=\"T:Syncfusion.Blazor.Grids.GridForeignColumn`1\" /> component and configure data source using\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />.</remarks>\n        ","Metadata":{"Common.PropertyName":"ForeignDataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridCommandColumn>"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.IEditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IComparer<global::System.Object>"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.FreezeDirection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ColumnType"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2006029629,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridForeignColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1466991493,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1261665606,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-754834605,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-466556136,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1496498467,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1758773211,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1997202627,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1957500231,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-406657864,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-697789878,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2550529,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"GridForeignColumn","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":18173258,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RefreshAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.RefreshAggregate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"RefreshAggregate","Components.GenericTyped":"True"}},{"HashCode":1156045141,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.RefreshAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.RefreshAggregate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"RefreshAggregate","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1703178846,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids._Imports","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-559989394,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids._Imports","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-18642900,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EditorCellBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"EditorCellBase","Components.GenericTyped":"True"}},{"HashCode":-70426439,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EditorCellBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"EditorCellBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1232800929,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterCheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterCheckBoxRenderer","Components.GenericTyped":"True"}},{"HashCode":-1692341191,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterCheckBoxRenderer","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1276690949,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterMenuRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Xvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Xvalue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Yvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Yvalue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterMenuRenderer","Components.GenericTyped":"True"}},{"HashCode":-415421186,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Xvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Xvalue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Yvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Yvalue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterMenuRenderer","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":575105339,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellBase","Components.GenericTyped":"True"}},{"HashCode":979164950,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-529539925,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridHeaderBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridHeaderBase","Components.GenericTyped":"True"}},{"HashCode":1392813688,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridHeaderBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":530448287,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRowBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridRowBase","Components.GenericTyped":"True"}},{"HashCode":-93318743,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridRowBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridRowBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":613259122,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BooleanEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"BooleanEditCell","Components.GenericTyped":"True"}},{"HashCode":261976025,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"BooleanEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2145110786,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DatePickerEditCell","Components.GenericTyped":"True"}},{"HashCode":-1193842047,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DatePickerEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-213735264,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DropDownEditCell","Components.GenericTyped":"True"}},{"HashCode":1893300087,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DropDownEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1665168397,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ForeignKeyEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Model","TypeName":"Syncfusion.Blazor.Grids.Internal.EditorDropDownModel","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.EditorDropDownModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeyEditCell","Components.GenericTyped":"True"}},{"HashCode":1664055840,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Model","TypeName":"Syncfusion.Blazor.Grids.Internal.EditorDropDownModel","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.EditorDropDownModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeyEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1860374412,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"NumericEditCell","Components.GenericTyped":"True"}},{"HashCode":373043253,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"TCell","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"NumericEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1925694768,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextBoxEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"TextBoxEditCell","Components.GenericTyped":"True"}},{"HashCode":-150248646,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"TextBoxEditCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1536942502,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AdaptiveDialogRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsSortIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsSortIconClicked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsFilterIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFilterIconClicked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"AdaptiveDialogRenderer","Components.GenericTyped":"True"}},{"HashCode":-875732893,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsSortIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsSortIconClicked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsFilterIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFilterIconClicked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"AdaptiveDialogRenderer","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":634059001,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BatchEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"BatchEdit","Components.GenericTyped":"True"}},{"HashCode":-1334006446,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.BatchEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"BatchEdit","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1075265138,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CaptionSummary","Components.GenericTyped":"True"}},{"HashCode":-1677851274,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CaptionSummary","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1457687096,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CellRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.CellRender<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CellRender","Components.GenericTyped":"True"}},{"HashCode":-1237756097,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CellRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.CellRender<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CellRender","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1855351530,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CellRender"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CellRender","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1360174846,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.CellRender"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CellRender","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1476179535,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Checked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CheckBoxClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"WrapperClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"WrapperClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RequireInput","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"RequireInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Lable","TypeName":"System.String","Metadata":{"Common.PropertyName":"Lable","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CCSelectAll","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"CCSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Intermediate","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Intermediate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CCClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CCClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CBSelectAllClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CBSelectAllClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsDisabled","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsDisabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsRtl","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Records","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Records","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Metadata":{"Common.PropertyName":"AriaLabel","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::System.Action<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CheckBoxRenderer"}},{"HashCode":-117304501,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Checked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CheckBoxClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"WrapperClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"WrapperClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"RequireInput","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"RequireInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Lable","TypeName":"System.String","Metadata":{"Common.PropertyName":"Lable","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CCSelectAll","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"CCSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Intermediate","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Intermediate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CCClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CCClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CBSelectAllClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CBSelectAllClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsDisabled","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsDisabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsRtl","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Records","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Records","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Metadata":{"Common.PropertyName":"AriaLabel","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::System.Action<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CheckBoxRenderer","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1163963041,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnChooser"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ColumnChooser","Components.GenericTyped":"True"}},{"HashCode":369047898,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ColumnChooser","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":932185926,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ColumnMenu","Components.GenericTyped":"True"}},{"HashCode":1853472718,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ColumnMenu","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-966080887,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CommandColumn","Components.GenericTyped":"True"}},{"HashCode":259622079,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"CommandColumn","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1004086062,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ContextMenu","Components.GenericTyped":"True"}},{"HashCode":2069721007,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ContextMenu","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":339388924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DetailCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DetailCell","Components.GenericTyped":"True"}},{"HashCode":-349252566,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DetailCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DetailCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DetailCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":172302336,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DialogEdit","Components.GenericTyped":"True"}},{"HashCode":1155731881,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DialogEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"DialogEdit","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1577999536,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EventRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<System.Object>","Metadata":{"Common.PropertyName":"Handler","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"EventRegister","Components.GenericTyped":"True"}},{"HashCode":1857356770,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EventRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<System.Object>","Metadata":{"Common.PropertyName":"Handler","Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"EventRegister","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-318623889,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ExpandCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ExpandCell","Components.GenericTyped":"True"}},{"HashCode":-913246954,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ExpandCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ExpandCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2118878844,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ExcelBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"isFiltered","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isFiltered","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ExcelBase","Components.GenericTyped":"True"}},{"HashCode":-773139334,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ExcelBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"isFiltered","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isFiltered","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ExcelBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-779905052,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterBarRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterBarRenderer","Components.GenericTyped":"True"}},{"HashCode":579763622,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterBarRenderer","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1335864505,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterInput"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterInput<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"FilterValue","TypeName":"System.Object","Metadata":{"Common.PropertyName":"FilterValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"CellType","TypeName":"System.String","Metadata":{"Common.PropertyName":"CellType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FieldName","TypeName":"System.String","Metadata":{"Common.PropertyName":"FieldName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ActualValue","TypeName":"System.Object","Metadata":{"Common.PropertyName":"ActualValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"isCheckBox","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Metadata":{"Common.PropertyName":"Predicate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"MatchCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterInput","Components.GenericTyped":"True"}},{"HashCode":1208467603,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterInput"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterInput<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.GridColumn"}},{"Kind":"Components.Component","Name":"FilterValue","TypeName":"System.Object","Metadata":{"Common.PropertyName":"FilterValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"CellType","TypeName":"System.String","Metadata":{"Common.PropertyName":"CellType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FieldName","TypeName":"System.String","Metadata":{"Common.PropertyName":"FieldName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ActualValue","TypeName":"System.Object","Metadata":{"Common.PropertyName":"ActualValue","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"isCheckBox","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Metadata":{"Common.PropertyName":"Predicate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"MatchCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterInput","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1818676023,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterType"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterType<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterType","Components.GenericTyped":"True"}},{"HashCode":746432328,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterType"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterType<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FilterType","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":725358296,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FooterContent","Components.GenericTyped":"True"}},{"HashCode":679684670,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FooterContent","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1973578657,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"FilterComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditorComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"EditorComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.GenericTyped":"True"}},{"HashCode":-607992244,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"FilterComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditorComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"EditorComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1819007500,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterComponent","ParentTag":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1153898197,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterComponent","ParentTag":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1500483860,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorComponent","ParentTag":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditorComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1104616525,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorComponent","ParentTag":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditorComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ForeignKeySubComponents","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1731154011,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenContent","Components.GenericTyped":"True"}},{"HashCode":215896855,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenContent","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":885210067,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenFooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenFooterContent","Components.GenericTyped":"True"}},{"HashCode":967513430,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenFooterContent","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-650065027,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenHeader","Components.GenericTyped":"True"}},{"HashCode":-466722898,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenHeader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":998981711,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenVirtual"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateY","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateY","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsXaxis","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsXaxis","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenVirtual","Components.GenericTyped":"True"}},{"HashCode":-946223656,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateY","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateY","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsXaxis","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsXaxis","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"FrozenVirtual","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-727641195,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCell","Components.GenericTyped":"True"}},{"HashCode":63731167,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-979036366,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridCellRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CellSelector","TypeName":"System.Func<Syncfusion.Blazor.Grids.Internal.Row<System.Object>, Syncfusion.Blazor.Grids.Internal.Cell<System.Object>, System.String>","Metadata":{"Common.PropertyName":"CellSelector","Common.GloballyQualifiedTypeName":"global::System.Func<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>, global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>, global::System.String>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellRegister","Components.GenericTyped":"True"}},{"HashCode":1212830545,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridCellRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CellSelector","TypeName":"System.Func<Syncfusion.Blazor.Grids.Internal.Row<System.Object>, Syncfusion.Blazor.Grids.Internal.Cell<System.Object>, System.String>","Metadata":{"Common.PropertyName":"CellSelector","Common.GloballyQualifiedTypeName":"global::System.Func<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>, global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>, global::System.String>","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellRegister","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":168269632,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellRegister","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":358567525,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridCellRegister","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1363405870,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsFrozenVirtual","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenVirtual","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridContent","Components.GenericTyped":"True"}},{"HashCode":1719353288,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsFrozenVirtual","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenVirtual","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridContent","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":751182452,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridDetailRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridDetailRow","Components.GenericTyped":"True"}},{"HashCode":-1225368779,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridDetailRow","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-274298662,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsFromClient","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFromClient","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"DataRows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"DataRows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozenRowMovable","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRowMovable","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"AriaColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"AriaColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FrozenLeftColumnCount","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"FrozenLeftColumnCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridHeader","Components.GenericTyped":"True"}},{"HashCode":2100206401,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsFromClient","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFromClient","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"DataRows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"DataRows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"IsFrozenRowMovable","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRowMovable","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"AriaColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"AriaColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FrozenLeftColumnCount","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"FrozenLeftColumnCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridHeader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1282494084,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridRow","Components.GenericTyped":"True"}},{"HashCode":1467398505,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMaskedRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsLastRow","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsLastRow","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridRow","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":232962590,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridToolbar<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridToolbar","Components.GenericTyped":"True"}},{"HashCode":229583001,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridToolbar<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridToolbar","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1948581322,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridVirtualContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"QueriedData","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"QueriedData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RQueryStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RQueryStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RQueryEndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RQueryEndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateY","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateY","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"VTableWidth","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"VTableWidth","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"NextRowToNavigate","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"NextRowToNavigate","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridVirtualContent","Components.GenericTyped":"True"}},{"HashCode":1273847263,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"QueriedData","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"QueriedData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"RStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"REndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"REndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RQueryStartIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RQueryStartIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"RQueryEndIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"RQueryEndIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TranslateY","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateY","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"VTableWidth","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"VTableWidth","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"NextRowToNavigate","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"NextRowToNavigate","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"IsHeader","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridVirtualContent","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1423376143,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridVirtualHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"THeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter THeader for the Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader> component.","Metadata":{"Common.PropertyName":"THeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"DataRows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"DataRows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"VTableWidth","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"VTableWidth","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridVirtualHeader","Components.GenericTyped":"True"}},{"HashCode":1393822729,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"THeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter THeader for the Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader> component.","Metadata":{"Common.PropertyName":"THeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"DataRows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"DataRows","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>>"}},{"Kind":"Components.Component","Name":"TranslateX","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"TranslateX","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"VTableWidth","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"VTableWidth","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"StartColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EndColumnIndex","TypeName":"System.Int32","Metadata":{"Common.PropertyName":"EndColumnIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GridVirtualHeader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-20024085,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GroupCaption","Components.GenericTyped":"True"}},{"HashCode":-1318203938,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GroupCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GroupCaption","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-863409526,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupDropArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GroupDropArea<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GroupDropArea","Components.GenericTyped":"True"}},{"HashCode":2967536,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GroupDropArea<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"GroupDropArea","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1132401704,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndentCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.IndentCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"IndentCell","Components.GenericTyped":"True"}},{"HashCode":-1124678426,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.IndentCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.IndentCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"IndentCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1599004729,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NormalEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Cell<System.Object>>","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>>"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"NormalEdit","Components.GenericTyped":"True"}},{"HashCode":-896539016,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.NormalEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Cell<System.Object>>","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>>"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"NormalEdit","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":134454601,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Preloader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.Preloader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Preloader","Components.GenericTyped":"True"}},{"HashCode":-761883767,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Preloader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.Preloader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Preloader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1477458429,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Preloader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Preloader","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-807750911,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.Preloader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Preloader","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1729073658,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PrintLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.PrintLayout<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Grids.SfGrid<T>","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SfGrid<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"PrintLayout","Components.GenericTyped":"True"}},{"HashCode":1001839774,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.PrintLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.PrintLayout<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Grids.SfGrid<T>","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.SfGrid<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"PrintLayout","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":296832548,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowDragCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"RowDragCell","Components.GenericTyped":"True"}},{"HashCode":418695273,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.RowDragCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"RowDragCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1026467821,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Summary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.Summary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Summary","Components.GenericTyped":"True"}},{"HashCode":-1545439604,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Summary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.Summary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cell","TypeName":"Syncfusion.Blazor.Grids.Internal.Cell<System.Object>","Metadata":{"Common.PropertyName":"Cell","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Cell<global::System.Object>"}},{"Kind":"Components.Component","Name":"Row","TypeName":"Syncfusion.Blazor.Grids.Internal.Row<System.Object>","Metadata":{"Common.PropertyName":"Row","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Grids.Internal.Row<global::System.Object>"}},{"Kind":"Components.Component","Name":"IsMaskedCell","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsMaskedCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaskCellAlignment","TypeName":"System.String","Metadata":{"Common.PropertyName":"MaskCellAlignment","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"Summary","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1012701763,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationDialog<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ValidationDialog","Components.GenericTyped":"True"}},{"HashCode":584333005,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationDialog<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ValidationDialog","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":538602333,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ValidationTooltip","Components.GenericTyped":"True"}},{"HashCode":-91450484,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"ValidationTooltip","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":723644935,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"WidthController"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.WidthController<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"WidthController","Components.GenericTyped":"True"}},{"HashCode":-1235692633,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.WidthController"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.WidthController<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Grids.GridColumn>"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen","Common.GloballyQualifiedTypeName":"global::System.Boolean?"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal","Common.TypeNameIdentifier":"WidthController","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1977693934,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnsValidator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnValidated","TypeName":"System.Action<Syncfusion.Blazor.Internal.ValidationResult>","Metadata":{"Common.PropertyName":"OnValidated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Internal.ValidationResult>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal.Editors","Common.TypeNameIdentifier":"ColumnsValidator","Components.GenericTyped":"True"}},{"HashCode":1632506048,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.PropertyName":"ValidationRules","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnValidated","TypeName":"System.Action<Syncfusion.Blazor.Internal.ValidationResult>","Metadata":{"Common.PropertyName":"OnValidated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Internal.ValidationResult>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","Common.TypeNamespace":"Syncfusion.Blazor.Grids.Internal.Editors","Common.TypeNameIdentifier":"ColumnsValidator","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":199985944,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager"}},{"HashCode":-759543464,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":24001194,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1493938545,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-291369210,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager"}},{"HashCode":-1232867526,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Data.SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1700899721,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1404161279,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Data.SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1984763636,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"JSInteropAdaptor"}},{"HashCode":910812718,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"JSInteropAdaptor","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2028556178,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1461150396,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Core._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":875315017,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent"}},{"HashCode":-960186876,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-164073763,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.SyncfusionLicense","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SyncfusionLicense"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.SyncfusionLicense","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"SyncfusionLicense"}},{"HashCode":-351795867,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.SyncfusionLicense","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.SyncfusionLicense"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.SyncfusionLicense","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"SyncfusionLicense","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":678620649,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The class provides data for the animation to Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay in milliseconds to start the animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the duration in milliseconds that the animation takes to open or close the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the dialog.\n            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.DialogEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogAnimationSettings"}},{"HashCode":-613914331,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The class provides data for the animation to Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay in milliseconds to start the animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the duration in milliseconds that the animation takes to open or close the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the dialog.\n            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.DialogEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-259898020,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Provides data to configure the Dialog button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when `click` the dialog button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ButtonType"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Flat appearance of the dialog buttons.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFlat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton"}},{"HashCode":-1819022058,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Provides data to configure the Dialog button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when `click` the dialog button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ButtonType"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Flat appearance of the dialog buttons.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFlat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-54074789,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1753024452,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-425265450,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Dialog buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons"}},{"HashCode":-1523224666,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Dialog buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1836015650,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-406932641,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":928960360,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Dialog component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers after the dialog has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.CloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the dialog is closed.\n            If you cancel this event, the dialog remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user drags the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStartEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStopEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the dialog is being opened.\n            If you cancel this event, the dialog remains closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the overlay of the dialog is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user resizes the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogEvents"}},{"HashCode":2078555530,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Dialog component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers after the dialog has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.CloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the dialog is closed.\n            If you cancel this event, the dialog remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user drags the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStartEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStopEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the dialog is being opened.\n            If you cancel this event, the dialog remains closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the overlay of the dialog is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user resizes the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-806843597,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configures to display a dialog in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset left value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset top value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogPositionData"}},{"HashCode":1847215367,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configures to display a dialog in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset left value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset top value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogPositionData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1366412900,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates"}},{"HashCode":-1819107374,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1189653649,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-768288862,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1016058195,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":726421065,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2086459624,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-506346627,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1719982671,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents the dialog component that displays the information and gets input from the user.\n            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be dragged by the end-user.\n            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.\n            that is used to control the dialog's closing behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the dialog.\n            One or more custom CSS classes can be added to a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be resized by the end-user.\n            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableResize","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Specifies the resize handles direction in the dialog component that can be resized by the end-user.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ResizeDirection[]"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the template value that can be displayed with the dialog's footer area.\n            This is an optional property and can be used only when the footer is occupied with information or custom components.\n            By default, the footer is configured with the action buttons.\n            If the footer template is configured to the dialog, the buttons property will be disabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.\n            `Modal`: It creates an overlay that disables interaction with the parent application and\n             the user who should respond with modal before continuing with other applications.\n            `Modeless`: It does not prevent user interaction with the parent application.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the min-height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target element in which the dialog should be displayed.\n            The default value is null, which refers to the `Document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the dialog component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the z-order for rendering that determines whether the dialog is displayed\n            in front or behind of another component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Dialog element re-render or not when the Dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog"}},{"HashCode":-1417084467,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents the dialog component that displays the information and gets input from the user.\n            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be dragged by the end-user.\n            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.\n            that is used to control the dialog's closing behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the dialog.\n            One or more custom CSS classes can be added to a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be resized by the end-user.\n            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableResize","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Specifies the resize handles direction in the dialog component that can be resized by the end-user.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ResizeDirection[]"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the template value that can be displayed with the dialog's footer area.\n            This is an optional property and can be used only when the footer is occupied with information or custom components.\n            By default, the footer is configured with the action buttons.\n            If the footer template is configured to the dialog, the buttons property will be disabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.\n            `Modal`: It creates an overlay that disables interaction with the parent application and\n             the user who should respond with modal before continuing with other applications.\n            `Modeless`: It does not prevent user interaction with the parent application.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the min-height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target element in which the dialog should be displayed.\n            The default value is null, which refers to the `Document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the dialog component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the z-order for rendering that determines whether the dialog is displayed\n            in front or behind of another component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Dialog element re-render or not when the Dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1498997869,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1511555829,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1261295628,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a dialog utility component that can be called from any page of the application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialogProvider"}},{"HashCode":-525958173,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a dialog utility component that can be called from any page of the application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialogProvider","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":346026897,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Closed` will be fired when the Tooltip component gets closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Opened` will be fired after the Tooltip component gets opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnClose` will be fired before the Tooltip hides from the screen.\n            The Tooltip close can be prevented by setting the cancel argument value to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnCollision` will be fired for every collision fit calculation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.\n            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.\n            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Created` will be fired after the Tooltip component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Destroyed` will be fired when the Tooltip component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n            <summary>\n            It is used to customize the animation of the Tooltip while opening and closing.\n            The animation property also allows you to set delay, duration, and various other effects of your choice.\n            You can set the same or different animation options to the Tooltip when it is in the open or close state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.AnimationModel"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To close the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            To display the content of the Tooltip which can be a string element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            To customize the Tooltip which accepts the custom CSS class names that define specific\n            user-defined styles and themes to be applied to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            As there are no properties required to persist in tooltip component, this property is deprecated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To enable or disable the rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.\n            If this property is enabled, tooltip will perform the collision calculation between the target elements.\n            and viewport(window) instead of Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WindowCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the height of the Tooltip component which accepts the string values.\n            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To display the Tooltip in an open state until it is closed manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSticky","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It allows the Tooltip to follow the mouse pointer moves over the specified target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MouseTrail","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in X-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetX","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in Y-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetY","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To open the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n            <summary>\n            To determine the type of open mode to display the Tooltip content.\n            The available open modes are Auto, Hover, Click, Focus, and Custom.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpensOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n            <summary>\n            To set the position of the Tooltip element with respect to the Target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            To denote the target selector where the Tooltip needs to be displayed.\n            The target element is considered as the parent container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to set the container element in which the Tooltip’s pop-up will be appended.\n            It's default value is `body`, in which the Tooltip’s pop-up will be appended.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Container","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the width of the Tooltip component which accepts a string value.\n            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Adds the additional html attributes to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip"}},{"HashCode":1435445850,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Closed` will be fired when the Tooltip component gets closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Opened` will be fired after the Tooltip component gets opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnClose` will be fired before the Tooltip hides from the screen.\n            The Tooltip close can be prevented by setting the cancel argument value to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnCollision` will be fired for every collision fit calculation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.\n            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.\n            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Created` will be fired after the Tooltip component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Destroyed` will be fired when the Tooltip component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n            <summary>\n            It is used to customize the animation of the Tooltip while opening and closing.\n            The animation property also allows you to set delay, duration, and various other effects of your choice.\n            You can set the same or different animation options to the Tooltip when it is in the open or close state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.AnimationModel"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To close the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            To display the content of the Tooltip which can be a string element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            To customize the Tooltip which accepts the custom CSS class names that define specific\n            user-defined styles and themes to be applied to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            As there are no properties required to persist in tooltip component, this property is deprecated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To enable or disable the rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.\n            If this property is enabled, tooltip will perform the collision calculation between the target elements.\n            and viewport(window) instead of Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WindowCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the height of the Tooltip component which accepts the string values.\n            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To display the Tooltip in an open state until it is closed manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSticky","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It allows the Tooltip to follow the mouse pointer moves over the specified target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MouseTrail","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in X-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetX","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in Y-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetY","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To open the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n            <summary>\n            To determine the type of open mode to display the Tooltip content.\n            The available open modes are Auto, Hover, Click, Focus, and Custom.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpensOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n            <summary>\n            To set the position of the Tooltip element with respect to the Target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            To denote the target selector where the Tooltip needs to be displayed.\n            The target element is considered as the parent container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to set the container element in which the Tooltip’s pop-up will be appended.\n            It's default value is `body`, in which the Tooltip’s pop-up will be appended.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Container","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the width of the Tooltip component which accepts a string value.\n            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Adds the additional html attributes to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1381512893,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1221866429,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1561197861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates"}},{"HashCode":-216491152,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":47812675,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1649211671,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1297486029,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":377319853,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1272120765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1745318158,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":8758068,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<T>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.GenericTyped":"True"}},{"HashCode":1825722044,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<T>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1709271508,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from Calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarEvents","Components.GenericTyped":"True"}},{"HashCode":1019271953,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from Calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":962809072,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the values of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.DateTime[]>>"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the calendar allows the user to select the multiple dates.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Values","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the values changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class etc., to the root element.\n            <para>If you configured both property and equivalent html attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.GenericTyped":"True"}},{"HashCode":2106378132,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the values of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.DateTime[]>>"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the calendar allows the user to select the multiple dates.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Values","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the values changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class etc., to the root element.\n            <para>If you configured both property and equivalent html attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-327893618,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2032371892,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2015867717,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DatePicker allows user to change the value via typing. When set as false, the DatePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DatePicker that the placeholder text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DatePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DatePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index value of the DatePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.GenericTyped":"True"}},{"HashCode":-666901683,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DatePicker allows user to change the value via typing. When set as false, the DatePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DatePicker that the placeholder text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DatePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DatePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index value of the DatePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":437588913,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1723668594,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-146680767,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when datepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerEvents","Components.GenericTyped":"True"}},{"HashCode":734491656,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when datepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1665562130,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the end date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the start date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DateRangePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the DateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Specifies the Presets of the dateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Presets","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Calendars.Presets>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.GenericTyped":"True"}},{"HashCode":1996946235,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the end date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the start date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DateRangePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the DateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Specifies the Presets of the dateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Presets","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Calendars.Presets>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1260799600,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-237565002,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":133916506,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when daterangepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another view or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers on selecting the start and end date.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerEvents","Components.GenericTyped":"True"}},{"HashCode":-1371987348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when daterangepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another view or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers on selecting the start and end date.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":860621992,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker and TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when dateptimeicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerEvents","Components.GenericTyped":"True"}},{"HashCode":-1149213788,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker and TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when dateptimeicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1946553272,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the time popup list .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the time value that to be displayed in time popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeFormat","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DatePicker allows user to change the value via typing. When set as false, the DatePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DatePicker that the placeholder text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DatePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DatePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index value of the DatePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.GenericTyped":"True"}},{"HashCode":182597194,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the time popup list .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the time value that to be displayed in time popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeFormat","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DatePicker allows user to change the value via typing. When set as false, the DatePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DatePicker that the placeholder text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DatePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DatePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the component to act as strict. So that, it allows to enter only a valid date  value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index value of the DatePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DatePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1159298873,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1096218311,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1926156294,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the TimePicker allows user to change the value via typing. When set as false, the TimePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the required time format of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in TimePicker. For example, when using German keyboard, the key actions can be customized using these shortcuts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the popup list or the given value is not present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the TimePicker to act as strict. So that, it allows to enter only a valid time value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range time value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the TimePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.GenericTyped":"True"}},{"HashCode":1592863819,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the TimePicker allows user to change the value via typing. When set as false, the TimePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the required time format of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in TimePicker. For example, when using German keyboard, the key actions can be customized using these shortcuts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the popup list or the given value is not present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the TimePicker to act as strict. So that, it allows to enter only a valid time value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range time value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the TimePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1224934015,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1136886053,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":838173861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when timepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control gets focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers while rendering the each popup list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerEvents","Components.GenericTyped":"True"}},{"HashCode":-518182689,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when timepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control gets focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers while rendering the each popup list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1367148883,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.DateTime"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset"}},{"HashCode":1026186323,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.DateTime"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-723318633,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1303939839,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1774898050,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets"}},{"HashCode":855735084,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1757794972,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1079464364,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":310231931,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1885981864,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1058852642,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.GenericTyped":"True"}},{"HashCode":-194427090,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":568356978,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarCell","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarCell>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.GenericTyped":"True"}},{"HashCode":1694270341,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarCell","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarCell>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":887869872,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarHeader","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarHeader>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.GenericTyped":"True"}},{"HashCode":804816384,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarHeader","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarHeader>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1638895570,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the AutoComplete Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of AutoCompleteEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteEvents","Components.GenericTyped":"True"}},{"HashCode":-2065569588,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the AutoComplete Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of AutoCompleteEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1628163903,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteFieldSettings"}},{"HashCode":-1685180194,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":96738852,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.GenericTyped":"True"}},{"HashCode":1517546100,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2001352903,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":455299729,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-490699579,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2107547892,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-466361132,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-157251634,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2016204610,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":455817597,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1082316561,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1814507241,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-634462063,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2086982961,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-788736413,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When set to 'true', highlight the searched characters on suggested list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Allows you to set the minimum search character length, the search action will perform after typed minimum characters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the popup button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Supports the specified number of list items on the suggestion popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.GenericTyped":"True"}},{"HashCode":1711483752,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When set to 'true', highlight the searched characters on suggested list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Allows you to set the minimum search character length, the search action will perform after typed minimum characters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the popup button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Supports the specified number of list items on the suggestion popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":387398812,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1720779311,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1770964585,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":215958532,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-561500546,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1446087588,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-686183976,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1592072962,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1823017219,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-396236206,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1159398468,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-699456818,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1556638867,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1870172824,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1787610432,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1673682997,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1075352880,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<T>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.GenericTyped":"True"}},{"HashCode":745779636,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<T>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-974385804,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1498594397,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1611980733,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2079543700,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":737843369,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-413601795,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1416379359,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":694577101,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1501209656,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the DropDownList Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxEvents","Components.GenericTyped":"True"}},{"HashCode":-1074269431,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the DropDownList Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1775539374,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxFieldSettings"}},{"HashCode":1994815199,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":631929669,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.GenericTyped":"True"}},{"HashCode":1847150271,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-319962534,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1937192522,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1551607891,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2064001427,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-519726652,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1003137433,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1524815248,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2095517871,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-526017593,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1953346895,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1270076833,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2142836507,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":752268925,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.GenericTyped":"True"}},{"HashCode":-360459077,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-455728174,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":565489331,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-882419984,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1335651465,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1914006086,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":621344683,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1239041761,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1199179971,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":999391136,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-277006903,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1744474966,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1369864618,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":74361634,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":465113495,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-200841236,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1304055421,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":469798695,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListEvents","Components.GenericTyped":"True"}},{"HashCode":-849522874,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1391752536,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListFieldSettings"}},{"HashCode":-2125081484,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1424096729,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.GenericTyped":"True"}},{"HashCode":-719760333,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1093546456,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-45604578,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":922144806,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":284187347,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1664591609,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1522363064,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1029229856,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":385705052,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-507282757,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1527957365,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1110450186,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-552856286,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-354503855,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-513364894,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":741606670,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.GenericTyped":"True"}},{"HashCode":540079097,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When AllowFiltering is set to true, show the filter bar (search box) of the component.</para>\n            <para>The filter action retrieves matched items through the `Filtering` event based on the characters typed in the search TextBox.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the DropDownList. One or more custom CSS classes can be added to a DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the DropDownList that the placeholder text floats above the DropDownList based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DropDownList when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DropDownList.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DropDownList after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in DropDownList. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the popup list. By default, the popup width sets based on the width of\n            the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the DropDownList allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the selected item in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            <para>Specifies the width of the component. By default, the component width sets based on the width of\n            its parent container.</para>\n            <para>You can also set the width in pixel values.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":63818865,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1815949630,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":992647517,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1265053198,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1262339501,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":769147587,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1813267824,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1836881088,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":837803469,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-33932134,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":145198417,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1908299105,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1450875772,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":840068618,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-798444963,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-771270455,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1840543469,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic listbox.\n            <code><![CDATA[\n            <SfListBox Value=@value DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=@valueDataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the drag and drop support in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the drag and drop is performed in the listbox. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            ListBox contains same 'Scope' property to perform drag and drop between multiple list boxes.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or diaable the filtering in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering is performed in the listbox. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates CSS class string to customize the appearance of listbox.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of listbox. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the limitation to the value selection in the listbox.\n            </summary>\n            <value>\n            Accepts a double value. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope to the listbox to perform drag and drop and toolbar action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Scope","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the specified item in the selected state of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the event callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.GenericTyped":"True"}},{"HashCode":2069820054,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic listbox.\n            <code><![CDATA[\n            <SfListBox Value=@value DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=@valueDataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the drag and drop support in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the drag and drop is performed in the listbox. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            ListBox contains same 'Scope' property to perform drag and drop between multiple list boxes.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or diaable the filtering in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering is performed in the listbox. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates CSS class string to customize the appearance of listbox.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of listbox. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the limitation to the value selection in the listbox.\n            </summary>\n            <value>\n            Accepts a double value. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope to the listbox to perform drag and drop and toolbar action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Scope","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the specified item in the selected state of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the event callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1440411025,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1597937362,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2110250303,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-836992973,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1011312716,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1163242465,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1930016394,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-831211947,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1096330164,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1346162683,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1591344811,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when select / unselect the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after dragging the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the listbox item is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when performing keydown action in a listbox item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxEvents","Components.GenericTyped":"True"}},{"HashCode":-346465222,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when select / unselect the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after dragging the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the listbox item is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when performing keydown action in a listbox item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-414785765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the groupBy value to group the list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxFieldSettings"}},{"HashCode":-1597757073,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the groupBy value to group the list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2037544176,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the selection settings of List Box.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multile</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SelectionMode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkox selection in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the checkox selection is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all checkox option in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkox option is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxSelectionSettings"}},{"HashCode":-93168562,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the selection settings of List Box.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multile</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SelectionMode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkox selection in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the checkox selection is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all checkox option in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkox option is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxSelectionSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":272121817,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies custom templates for list items in ListBox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.GenericTyped":"True"}},{"HashCode":-1046487235,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies custom templates for list items in ListBox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":388764408,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-526990918,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-516496618,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1754890447,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":536515258,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox tool bar settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used in dual listbox.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the ListBox.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the ListBox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.ToolBarPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxToolbarSettings"}},{"HashCode":-2116975981,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox tool bar settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used in dual listbox.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the ListBox.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the ListBox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.ToolBarPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxToolbarSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1660335777,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the MultiSelect component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows user to add a\n            Custom value the value which is not present in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>To enable the filtering option in this component.</para>\n            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>\n            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>\n            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Based on the property, when item get select popup visibility state will changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the delimiter character for 'default' and 'delimiter' visibility modes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies a boolean value that indicates the whether the grouped list items are\n            allowed to check by checking the group header in checkbox mode.</para>\n            <para>By default, there is no checkbox provided for group headers.</para>\n            <para>This property allows you to render checkbox for group headers and to select\n            all the grouped items at once.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Reorder the selected items in popup visibility state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.\n            <para>Possible values are: </para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the MultiSelect.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Hides the selected item from the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            <para>Sets limitation to the value selection.</para>\n            <para>Based on the limitation, list selection will be prevented.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            configures visibility mode for component interaction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VisualMode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Whether to automatically open the popup when the control is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list. By default, it renders based on its list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list and percentage values has calculated based on input width.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the MultiSelect allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the selectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables close icon with the each selected item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the DropDown button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the selectAll option on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Text` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the UnSelectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Value` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the component. By default, it sizes based on its parent.\n            container dimension.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.GenericTyped":"True"}},{"HashCode":-1949546483,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the MultiSelect component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows user to add a\n            Custom value the value which is not present in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>To enable the filtering option in this component.</para>\n            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>\n            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>\n            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Based on the property, when item get select popup visibility state will changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the delimiter character for 'default' and 'delimiter' visibility modes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies a boolean value that indicates the whether the grouped list items are\n            allowed to check by checking the group header in checkbox mode.</para>\n            <para>By default, there is no checkbox provided for group headers.</para>\n            <para>This property allows you to render checkbox for group headers and to select\n            all the grouped items at once.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Reorder the selected items in popup visibility state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.\n            <para>Possible values are: </para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the MultiSelect.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Hides the selected item from the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            <para>Sets limitation to the value selection.</para>\n            <para>Based on the limitation, list selection will be prevented.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            configures visibility mode for component interaction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VisualMode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Whether to automatically open the popup when the control is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list. By default, it renders based on its list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list and percentage values has calculated based on input width.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the MultiSelect allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the selectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables close icon with the each selected item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the DropDown button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the selectAll option on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Text` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the UnSelectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Value` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the component. By default, it sizes based on its parent.\n            container dimension.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-895972840,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2042092950,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1404478538,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1387874239,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":878109042,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":133164963,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1223873132,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":606075826,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":143708793,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2022972688,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1498863010,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2115247635,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-182470187,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1734994647,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1500674489,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1917389755,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2122523781,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the MultiSelect Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens before animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires each time when selection changes happened in list items after model and input value get affected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Event triggers when the chip selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when the CustomValue is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers event,when user types a text in search box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens after animation completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after select all process completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Fires after cleared all item using clear icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before set the selected item as chip in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectEvents","Components.GenericTyped":"True"}},{"HashCode":-568177053,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the MultiSelect Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens before animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires each time when selection changes happened in list items after model and input value get affected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Event triggers when the chip selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when the CustomValue is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers event,when user types a text in search box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens after animation completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after select all process completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Fires after cleared all item using clear icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before set the selected item as chip in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1991640619,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectFieldSettings"}},{"HashCode":1082854707,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2113576836,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.GenericTyped":"True"}},{"HashCode":-2022840152,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1954836008,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-244415358,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1864590319,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-39241861,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1827585040,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-263704244,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":880960926,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-449901494,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":479940188,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2027372293,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-259147836,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1350470997,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1945835766,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-283678793,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1528278722,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1675380751,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2096158254,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.GenericTyped":"True"}},{"HashCode":1051725378,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-646003639,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-403373018,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1889475275,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1316092770,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1884542190,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-645734458,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-325905456,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1971334742,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-136987970,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":291615984,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":193489735,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-377560578,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-262641035,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFaiure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFaiure","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.GenericTyped":"True"}},{"HashCode":954155291,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFaiure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFaiure","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Accepts the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Accepts the external `Query` that execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>When set to `false`, consider the `case-sensitive` on performing the search to find suggestions.</para>\n            <para>By default, consider the casing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            specifies the z-index value of the component popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-346244362,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":821832221,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-154878091,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":457591553,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1761199952,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1424199972,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1183894899,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-651725854,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":217941932,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton"}},{"HashCode":1922450762,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1583694083,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1882924583,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":321394870,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SelectionMode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup"}},{"HashCode":1554697286,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SelectionMode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-392240953,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-631823658,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-789756772,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownButtonEvents"}},{"HashCode":-635384321,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1418854447,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton"}},{"HashCode":-338763107,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":72793425,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1428610707,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1577490415,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":84626783,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1085695201,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton"}},{"HashCode":2057406800,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1000884829,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":783284006,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-444581343,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonAnimationSettings"}},{"HashCode":1506618542,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2147330923,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnEnd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonEvents"}},{"HashCode":-261828031,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnEnd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1993845727,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SpinPosition"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings"}},{"HashCode":-697954306,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SpinPosition"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1895003630,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2146911356,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-637167061,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton"}},{"HashCode":-550740083,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1033976283,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2017838642,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2045459703,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2073628070,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1413933829,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SplitButtonEvents"}},{"HashCode":-663834660,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SplitButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1496552307,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem"}},{"HashCode":-1861656747,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":791381598,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1394892098,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-476747704,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems"}},{"HashCode":-1423146521,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1662608636,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1141455294,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1611969254,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1169828923,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1042264785,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons.Internal","Common.TypeNameIdentifier":"DropDownMenu"}},{"HashCode":49911614,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons.Internal","Common.TypeNameIdentifier":"DropDownMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":830709127,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.ColorPickerMode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String[]>"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker"}},{"HashCode":-885868283,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.ColorPickerMode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String[]>"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-884903067,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1427853590,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":401920082,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the SfMaskedTextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to include the literals or not in the value.\n            </summary>\n             <c>true</c>\n             To include the literals in the value; otherwise,\n             <b>false</b>\n             The default value is\n             <c>false</c>\n             <value>\n            <remarks>\n            You can get the masked value using GetMaksedValue method also. \n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the Value property.The default value is a space.\n             </summary>\n            <remarks>\n            You can use this option when you enable the EnableLiterals property: Otherwise, this option will not work\n            </remarks>\n             <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" />\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder","Common.GloballyQualifiedTypeName":"global::System.Char?"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets a value that masks the MaskedTextBox to allow/validate the user input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mask","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets a value that will be shown as a prompting symbol for the masked value.\n            The symbol used to show input positions in the MaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PromptChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Sets the collection of values to be mapped for non-mask elements(literals)\n            which have been set in the mask of MaskedTextBox.\n             <para>In the below example, non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox"}},{"HashCode":1173738330,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the SfMaskedTextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to include the literals or not in the value.\n            </summary>\n             <c>true</c>\n             To include the literals in the value; otherwise,\n             <b>false</b>\n             The default value is\n             <c>false</c>\n             <value>\n            <remarks>\n            You can get the masked value using GetMaksedValue method also. \n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the Value property.The default value is a space.\n             </summary>\n            <remarks>\n            You can use this option when you enable the EnableLiterals property: Otherwise, this option will not work\n            </remarks>\n             <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" />\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder","Common.GloballyQualifiedTypeName":"global::System.Char?"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets a value that masks the MaskedTextBox to allow/validate the user input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mask","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets a value that will be shown as a prompting symbol for the masked value.\n            The symbol used to show input positions in the MaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PromptChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Sets the collection of values to be mapped for non-mask elements(literals)\n            which have been set in the mask of MaskedTextBox.\n             <para>In the below example, non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":133249658,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-668479135,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2090695116,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Currency","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Decimals","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the number format that indicates the display format for the value of the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the incremental or decremental step size for the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.\n            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>\n            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the length of the decimal should be restricted during typing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a maximum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a minimum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.GenericTyped":"True"}},{"HashCode":572507594,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Currency","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Decimals","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the number format that indicates the display format for the value of the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the incremental or decremental step size for the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.\n            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>\n            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the length of the decimal should be restricted during typing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a maximum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a minimum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-186505045,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1540973885,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1810024344,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value of the NumericTextBox changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus in.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.GenericTyped":"True"}},{"HashCode":2111496581,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value of the NumericTextBox changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus in.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1114052726,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSignature"}},{"HashCode":1183426532,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSignature","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1039114532,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange"}},{"HashCode":708065503,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1262060764,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-155630390,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1831653681,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges"}},{"HashCode":-2079168725,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1722933752,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1653907624,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1498337701,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValues","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderOrientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderType"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.GenericTyped":"True"}},{"HashCode":1383500973,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValues","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderOrientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderType"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1069268033,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1441596755,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1168575143,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderEvents","Components.GenericTyped":"True"}},{"HashCode":-799982568,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1018439215,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimitData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderLimitData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimitData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimitData"}},{"HashCode":1632921212,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimitData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderLimitData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimitData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimitData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":339315645,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimitData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderLimitData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimitData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimitData","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1832534351,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimitData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderLimitData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimitData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimitData","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2140409157,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits"}},{"HashCode":-1649123400,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":426102360,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1158693883,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2117167915,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks"}},{"HashCode":705586969,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1950881977,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-552719392,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1888778633,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicksData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicksData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicksData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicksData"}},{"HashCode":1873432148,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicksData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTicksData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicksData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicksData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-134916201,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicksData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicksData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicksData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicksData","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-269987772,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicksData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTicksData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicksData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicksData","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1847210161,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip"}},{"HashCode":-302768571,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-396127562,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1216376416,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1066951492,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltipData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTooltipData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltipData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltipData"}},{"HashCode":-2020991248,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltipData","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTooltipData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltipData","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltipData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1400966481,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltipData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTooltipData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltipData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltipData","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1646118073,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltipData.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTooltipData"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltipData.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltipData","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1335901181,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of TextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusInEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of TextBox has changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Input","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.InputEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.AutoComplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.InputType"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox"}},{"HashCode":-760404558,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of TextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusInEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of TextBox has changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Input","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.InputEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.AutoComplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.InputType"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1890445367,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions\n            with comma separators.\n            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as \".jpg,.png\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the Uploader component initiates automatic upload when the files are added in upload queue.\n            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>\n            <para>The buttons \"upload\" and \"clear\" will be hided from file list when AutoUpload property is true.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with root element of the Uploader.\n            One or more custom CSS classes can be added to a Uploader.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the drop target to handle the drag-and-drop upload.\n            By default, the Uploader creates wrapper around file input that will act as drop target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the drag operation effect to the Uploader component.\n            <para> Possible values are .</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term>\n            </item>\n            <item>\n            <term>Move</term>\n            </item>\n            <item>\n            <term>Link</term>\n            </item>\n            <item>\n            <term>None</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Uploader in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>\n            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum allowed file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload too large files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload empty files and small files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the file Uploader component is processing the multiple files simultaneously.\n            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the default file list can be rendered.\n            The property used to prevent default file list and design own template for file list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFileList","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader"}},{"HashCode":812418517,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions\n            with comma separators.\n            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as \".jpg,.png\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the Uploader component initiates automatic upload when the files are added in upload queue.\n            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>\n            <para>The buttons \"upload\" and \"clear\" will be hided from file list when AutoUpload property is true.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with root element of the Uploader.\n            One or more custom CSS classes can be added to a Uploader.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the drop target to handle the drag-and-drop upload.\n            By default, the Uploader creates wrapper around file input that will act as drop target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the drag operation effect to the Uploader component.\n            <para> Possible values are .</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term>\n            </item>\n            <item>\n            <term>Move</term>\n            </item>\n            <item>\n            <term>Link</term>\n            </item>\n            <item>\n            <term>None</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Uploader in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>\n            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum allowed file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload too large files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload empty files and small files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the file Uploader component is processing the multiple files simultaneously.\n            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the default file list can be rendered.\n            The property used to prevent default file list and design own template for file list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFileList","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1422083512,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":844797047,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":53561694,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":5429795,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1104521128,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.\n            The upload operations could not perform without this property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings"}},{"HashCode":463805220,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.\n            The upload operations could not perform without this property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1117699384,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-456072094,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1043693435,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons"}},{"HashCode":-680783060,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1686963958,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-698005617,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":946232511,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Triggers after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process before. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Fires if cancel the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.CancelEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when changes occur in uploaded file list by selecting or dropping files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Fires if the chunk file failed to upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Fires when the chunk file uploaded successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Triggers before clearing the items in file list when clicking \"clear\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClear","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ClearingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request fails on uploading or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Triggers before rendering each file item from the file list in a page.\n            It helps to customize specific file item structure.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if pause the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Paused","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Triggers when uploading a file to the server using the AJAX request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RemovingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResume","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Triggers after selecting or dropping the files by adding the files in upload queue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SelectedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request gets success on uploading files or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Success","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderEvents"}},{"HashCode":755635891,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Triggers after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process before. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Fires if cancel the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.CancelEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when changes occur in uploaded file list by selecting or dropping files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Fires if the chunk file failed to upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Fires when the chunk file uploaded successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Triggers before clearing the items in file list when clicking \"clear\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClear","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ClearingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request fails on uploading or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Triggers before rendering each file item from the file list in a page.\n            It helps to customize specific file item structure.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if pause the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Paused","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Triggers when uploading a file to the server using the AJAX request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RemovingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResume","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Triggers after selecting or dropping the files by adding the files in upload queue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SelectedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request gets success on uploading files or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Success","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-525544715,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles"}},{"HashCode":-796876964,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1806266412,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-270000115,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1085553220,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles"}},{"HashCode":-1105332898,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":155119185,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1850392438,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1293367278,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates"}},{"HashCode":1045837695,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1728028732,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1139655866,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1632581900,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-439583136,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-194684865,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1417501261,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1050392776,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase"}},{"HashCode":1070702556,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1238929191,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2103171543,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1684933322,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerBase"}},{"HashCode":-1733155704,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-115464082,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPicker"}},{"HashCode":422500948,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-133761569,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPalette"}},{"HashCode":1686387243,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPalette","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1220744462,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.InputChange>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerTextBox"}},{"HashCode":-814340064,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.InputChange>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2131334541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender"}},{"HashCode":-852918399,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":545226124,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1850065799,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-173497423,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"TickElement"}},{"HashCode":-170321968,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"TickElement","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-407561092,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the Accordion item.\n            Default animation is given as SlideUp for collapsing accordion animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationCollapse"}},{"HashCode":-1914191163,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the Accordion item.\n            Default animation is given as SlideUp for collapsing accordion animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationCollapse","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1566796059,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the Accordion item.\n            Default animation is given as SlideDown for expanding accordion animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationExpand"}},{"HashCode":-1817944858,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the Accordion item.\n            Default animation is given as SlideDown for expanding accordion animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationExpand","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1893557223,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Accordion animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationSettings"}},{"HashCode":341079783,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Accordion animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":248582273,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-477408849,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1316821064,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AccordionClickArgs>","Documentation":"\n            <summary>\n            The event triggers when clicking anywhere within the Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AccordionClickArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the control rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapseEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.CollapseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionEvents"}},{"HashCode":1206224002,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AccordionClickArgs>","Documentation":"\n            <summary>\n            The event triggers when clicking anywhere within the Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AccordionClickArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the control rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapseEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.CollapseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-778396050,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines accordion panels.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the header to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the text content to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the accordion item is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specify a Boolean value that indicates whether the accordion panel is expanded or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the header text to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines an icon with the given custom CSS class that is to be rendered before the header text.\n            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.\n            Adding icon is applicable only to the header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a Boolean value that indicates whether the accordion item is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets Id attribute for accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ExpandedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem"}},{"HashCode":1574994766,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines accordion panels.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the header to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the text content to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the accordion item is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specify a Boolean value that indicates whether the accordion panel is expanded or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the header text to be displayed for the Accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines an icon with the given custom CSS class that is to be rendered before the header text.\n            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.\n            Adding icon is applicable only to the header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a Boolean value that indicates whether the accordion item is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets Id attribute for accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ExpandedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-594437499,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":712673439,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":989529551,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Sets the header to be displayed for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":640390142,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Sets the header to be displayed for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2105832364,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Sets the content to be displayed for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-863077991,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Sets the content to be displayed for the Accordion item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1806613762,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItems"}},{"HashCode":-1059097028,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Accordion items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1186808025,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1328118950,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Accordion items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-489202572,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the accordion element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable content of all the accordion are rendered on the initial load and maintained in the DOM.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExpandMode","TypeName":"Syncfusion.Blazor.Navigations.ExpandMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the options to expand a single or multiple panels at a time.\n            The possible values are:\n            - Single: Sets to expand only one Accordion item at a time.\n            - Multiple: Sets to expand more than one Accordion item at a time.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ExpandMode"}},{"Kind":"Components.Component","Name":"ExpandedIndices","TypeName":"System.Int32[]","Documentation":"\n            <summary>\n            Specifies the index of items that is expanded on the initial load.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndices","Common.GloballyQualifiedTypeName":"global::System.Int32[]"}},{"Kind":"Components.Component","Name":"ExpandedIndicesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndicesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Accordion that can be represented in pixels/percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Accordion that can be represented as pixels/percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the html attributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion"}},{"HashCode":-1912270361,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the accordion element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable content of all the accordion are rendered on the initial load and maintained in the DOM.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExpandMode","TypeName":"Syncfusion.Blazor.Navigations.ExpandMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the options to expand a single or multiple panels at a time.\n            The possible values are:\n            - Single: Sets to expand only one Accordion item at a time.\n            - Multiple: Sets to expand more than one Accordion item at a time.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ExpandMode"}},{"Kind":"Components.Component","Name":"ExpandedIndices","TypeName":"System.Int32[]","Documentation":"\n            <summary>\n            Specifies the index of items that is expanded on the initial load.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndices","Common.GloballyQualifiedTypeName":"global::System.Int32[]"}},{"Kind":"Components.Component","Name":"ExpandedIndicesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndicesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Accordion that can be represented in pixels/percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Accordion that can be represented as pixels/percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the html attributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1864342622,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Accordion.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAccordion"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-106212333,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Accordion.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfAccordion"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":356456631,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents breadcrumb component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.\n            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content of the Breadcrumb item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Set child content within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive, to render as HTML content.\n            </remarks>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <c>ChildContent</c> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem>Home</BreadcrumbItem>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.\n            </summary>\n            <value>\n            Accepts Url string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When Url has not been set, you can customize the item navigation using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem IconCss=\"e-icons e-home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Breadcrumb item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the Breadcrumb item is disabled. The default value is <c>false</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Disabled=\"true\" Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" title=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItem"}},{"HashCode":-340928156,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents breadcrumb component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.\n            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content of the Breadcrumb item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Set child content within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive, to render as HTML content.\n            </remarks>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <c>ChildContent</c> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem>Home</BreadcrumbItem>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.\n            </summary>\n            <value>\n            Accepts Url string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When Url has not been set, you can customize the item navigation using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem IconCss=\"e-icons e-home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Breadcrumb item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the Breadcrumb item is disabled. The default value is <c>false</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Disabled=\"true\" Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" title=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1645079033,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"BreadcrumbItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-951943940,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":710898246,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItems"}},{"HashCode":38355059,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1953923286,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"BreadcrumbItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-39103594,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-807243843,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents template options in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> or <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be set <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            To access template's context parameter use <c>@context</c> in both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" />.\n            </remarks>\n            <example>\n            In the below code example, both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> has been specified.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SeparatorTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<(Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SeparatorTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<(global::Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, global::Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates"}},{"HashCode":-1614305965,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents template options in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> or <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be set <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            To access template's context parameter use <c>@context</c> in both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" />.\n            </remarks>\n            <example>\n            In the below code example, both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> has been specified.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SeparatorTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<(Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SeparatorTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<(global::Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, global::Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-162801605,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":449153242,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":614156471,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SeparatorTemplate","ParentTag":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'SeparatorTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1500476908,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SeparatorTemplate","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'SeparatorTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"BreadcrumbTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1107450551,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n            The aim is to make the user aware of their current position in a hierarchy of website links.\n            </summary>\n            <remarks>\n            Breadcrumb items can be populated either by specifying <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url\" /> property or by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be used to customize the Breadcrumb component UI using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url based on which the Breadcrumb items are generated.\n            </summary>\n            <value>\n            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only absolute Url to this property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb Url=\"https://blazor.syncfusion.com/demos/breadcrumb/navigation\">\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n            <seealso cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets the list of breadcrumb items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>"}},{"Kind":"Components.Component","Name":"ActiveItem","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> of the active breadcrumb item.\n            </summary>\n            <value>\n            This property contains Url string of active breadcrumb item.\n            </value>\n            <remarks>\n            This property is updated only when the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> has value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems ActiveItem=\"@activeItem\">\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private string activeItem = \"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\";\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ActiveItem","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaxItems","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.\n            If the number of items exceeds this count, then items are rendered based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode\" /> property. \n            </summary>\n            <value>\n            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" /> is applicable only if the number of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is greater than <c>2</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxItems","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Hidden</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.\n            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.\n            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. \n            If the <c>OverflowMode</c> is <c>Menu</c>, it shows the number of breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.\n            If the <c>OverflowMode</c> is <c>Wrap</c>, it wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>Scroll</c>, it shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>None</c>, it shows all the items on a single line.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode"}},{"Kind":"Components.Component","Name":"EnableNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.\n            </summary>\n            <value>\n            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.\n            </value>\n            <remarks>\n            You can handle navigation in using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event by setting <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableActiveItemNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).\n            </summary>\n            <value>\n            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableActiveItemNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for breadcrumb component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for breadcrumb component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the breadcrumb component is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the breadcrumb component is disabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, Breadcrumb width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb style=\"width:200px\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActiveItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a callback that updates the bound active item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveItemChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            You can customize the breadcrumb items rendering using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs\" />.\n            </remarks>\n            <example>\n            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.\n            <code><![CDATA[\n            <SfBreadcrumb ItemRendering=\"@ItemRendering\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config.json\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {\n                    args.Item.Text = args.Item.Text.ToLower();\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is clicked. \n            </summary>\n            <remarks>\n            You can customize the item navigation using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs\" /> by setting <seealso cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            The event is raised for UI based click only.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @inject NavigationManager NavigationManager\n            <SfBreadcrumb ItemClicked=\"@ItemClicked\" EnableNavigation=\"false\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\" Url=\"programfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\" Url=\"commomfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\" Url=\"services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config\" Url=\"config\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemClicked(BreadcrumbClickedEventArgs args) {\n                    NavigationManager.NavigateTo(args.Item.Url);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb"}},{"HashCode":1279283609,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n            The aim is to make the user aware of their current position in a hierarchy of website links.\n            </summary>\n            <remarks>\n            Breadcrumb items can be populated either by specifying <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url\" /> property or by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be used to customize the Breadcrumb component UI using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url based on which the Breadcrumb items are generated.\n            </summary>\n            <value>\n            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only absolute Url to this property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb Url=\"https://blazor.syncfusion.com/demos/breadcrumb/navigation\">\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n            <seealso cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets the list of breadcrumb items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>"}},{"Kind":"Components.Component","Name":"ActiveItem","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> of the active breadcrumb item.\n            </summary>\n            <value>\n            This property contains Url string of active breadcrumb item.\n            </value>\n            <remarks>\n            This property is updated only when the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> has value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems ActiveItem=\"@activeItem\">\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private string activeItem = \"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\";\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ActiveItem","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaxItems","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.\n            If the number of items exceeds this count, then items are rendered based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode\" /> property. \n            </summary>\n            <value>\n            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" /> is applicable only if the number of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is greater than <c>2</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxItems","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Hidden</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.\n            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.\n            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. \n            If the <c>OverflowMode</c> is <c>Menu</c>, it shows the number of breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.\n            If the <c>OverflowMode</c> is <c>Wrap</c>, it wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>Scroll</c>, it shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>None</c>, it shows all the items on a single line.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode"}},{"Kind":"Components.Component","Name":"EnableNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.\n            </summary>\n            <value>\n            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.\n            </value>\n            <remarks>\n            You can handle navigation in using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event by setting <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableActiveItemNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).\n            </summary>\n            <value>\n            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableActiveItemNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for breadcrumb component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for breadcrumb component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the breadcrumb component is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the breadcrumb component is disabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, Breadcrumb width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb style=\"width:200px\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActiveItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a callback that updates the bound active item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveItemChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            You can customize the breadcrumb items rendering using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs\" />.\n            </remarks>\n            <example>\n            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.\n            <code><![CDATA[\n            <SfBreadcrumb ItemRendering=\"@ItemRendering\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config.json\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {\n                    args.Item.Text = args.Item.Text.ToLower();\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is clicked. \n            </summary>\n            <remarks>\n            You can customize the item navigation using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs\" /> by setting <seealso cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            The event is raised for UI based click only.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @inject NavigationManager NavigationManager\n            <SfBreadcrumb ItemClicked=\"@ItemClicked\" EnableNavigation=\"false\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\" Url=\"programfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\" Url=\"commomfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\" Url=\"services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config\" Url=\"config\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemClicked(BreadcrumbClickedEventArgs args) {\n                    NavigationManager.NavigateTo(args.Item.Url);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-26151069,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfBreadcrumb"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1110689477,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-31662396,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.CarouselItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the Carousel item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> component.\n            </summary>\n            <example> \n            In the below code example, a basic Carousel has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive. \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for carousel item to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem CssClass=\"item1\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem CssClass=\"item2\"><div>Slide 2</div></CarouselItem>\n                <CarouselItem CssClass=\"item3\"><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the carousel item element.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem HtmlAttributes=\"customAttribute\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"slide1\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the auto transition time in milliseconds for individual carousel items. \n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem Interval=\"3000\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem"}},{"HashCode":999612162,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.CarouselItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the Carousel item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> component.\n            </summary>\n            <example> \n            In the below code example, a basic Carousel has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive. \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.CarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for carousel item to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem CssClass=\"item1\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem CssClass=\"item2\"><div>Slide 2</div></CarouselItem>\n                <CarouselItem CssClass=\"item3\"><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the carousel item element.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem HtmlAttributes=\"customAttribute\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"slide1\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the auto transition time in milliseconds for individual carousel items. \n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem Interval=\"3000\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1091614418,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":386105759,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1195071536,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1709896209,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"CarouselItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-757495028,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The carousel component is a slide show of images, contents or images with contents.\n            </summary>\n            <remarks>\n            Carousel items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Carousel component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AutoPlay","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition is automatic or manual. \n            </summary> \n            <value> \n            false, the slide transition has been stopped otherwise the slide transition plays. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"AutoPlay","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the Carousel component.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel CssClass=\"custom-carousel e-custom-animation\"></SfCarousel> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value> \n            true, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property is persisted. The default value is `false`. \n            </value>\n            <remarks> \n            To persist the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property, it is mandatory to provide the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.ID\" /> property.\n            </remarks> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselSlide\" EnablePersistence=\"true\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for Carousel component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for carousel component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableTouchSwipe","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should occur or not when performing swipe action. \n            </summary> \n            <value> \n            true, the slide transition with swipe action in touch screen works otherwise touch swipe action does not work. The default value is `true`. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableTouchSwipe","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the carousel will render based on specified width otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Height=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the carousel element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying <c>HtmlAttributes</c> directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel HtmlAttributes=\"customAttribute\"></SfCarousel> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"Slide show of current News\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for carousel component.\n            </summary>\n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselForNews\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AnimationEffect","TypeName":"Syncfusion.Blazor.Navigations.CarouselAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effects applies to the slide transition. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide\" />\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel AnimationEffect=\"CarouselAnimationEffect.Fade\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"AnimationEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.CarouselAnimationEffect"}},{"Kind":"Components.Component","Name":"Loop","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should loop or end when reaches the last slide of the carousel. \n            </summary> \n            <value> \n            false, the slide transition has been stopped at end of the last slide otherwise the slide transition plays continuously. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Loop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the amount of delay time to transition slides automatically. \n            </summary> \n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval otherwise the default interval value 5000 is set.  \n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Interval=\"4000\"></SfCarousel> \n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the index of the current carousel item. \n            </summary> \n            <value> \n            If we set the index value, then the slides begin from specified index otherwise the default index value 0 is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel SelectedIndex=\"1\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"SelectedIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Invokes when index of the active slide changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedIndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ButtonsVisibility","TypeName":"Syncfusion.Blazor.Navigations.CarouselButtonVisibility","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets whether to show previous/next navigation buttons or not. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible\" /> \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel ButtonsVisibility=\"CarouselButtonVisibility.VisibleOnHover\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ButtonsVisibility","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.CarouselButtonVisibility"}},{"Kind":"Components.Component","Name":"ShowIndicators","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show indicators or not. \n            </summary> \n            <value> \n            false, the slide transition indicators will not be shown otherwise the indicators is shown. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowIndicators","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPlayButton","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show play button or not to play or pause the transitions. \n            </summary> \n            <value> \n            true, the slide transition play/pause button will be shown otherwise the button is not shown. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowPlayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the carousel will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Width=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PreviousButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PreviousButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NextButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NextButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IndicatorsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IndicatorsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PlayButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PlayButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PauseOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the auto play slides pause on mouse hover or not.\n            </summary>\n            <value>\n            false, the slide transition has been played on mouse enters to carousel otherwise the slide transition paused. The default value is `true`.\n            </value>\n            <remarks>\n            This property applicable when <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay\" /> value is true.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCarousel PauseOnHover=\"false\"></SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PauseOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel"}},{"HashCode":833475755,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The carousel component is a slide show of images, contents or images with contents.\n            </summary>\n            <remarks>\n            Carousel items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Carousel component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AutoPlay","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition is automatic or manual. \n            </summary> \n            <value> \n            false, the slide transition has been stopped otherwise the slide transition plays. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"AutoPlay","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the Carousel component.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel CssClass=\"custom-carousel e-custom-animation\"></SfCarousel> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value> \n            true, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property is persisted. The default value is `false`. \n            </value>\n            <remarks> \n            To persist the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property, it is mandatory to provide the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.ID\" /> property.\n            </remarks> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselSlide\" EnablePersistence=\"true\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for Carousel component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for carousel component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableTouchSwipe","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should occur or not when performing swipe action. \n            </summary> \n            <value> \n            true, the slide transition with swipe action in touch screen works otherwise touch swipe action does not work. The default value is `true`. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableTouchSwipe","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the carousel will render based on specified width otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Height=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the carousel element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying <c>HtmlAttributes</c> directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel HtmlAttributes=\"customAttribute\"></SfCarousel> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"Slide show of current News\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for carousel component.\n            </summary>\n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselForNews\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AnimationEffect","TypeName":"Syncfusion.Blazor.Navigations.CarouselAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effects applies to the slide transition. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide\" />\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel AnimationEffect=\"CarouselAnimationEffect.Fade\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"AnimationEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.CarouselAnimationEffect"}},{"Kind":"Components.Component","Name":"Loop","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should loop or end when reaches the last slide of the carousel. \n            </summary> \n            <value> \n            false, the slide transition has been stopped at end of the last slide otherwise the slide transition plays continuously. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Loop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the amount of delay time to transition slides automatically. \n            </summary> \n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval otherwise the default interval value 5000 is set.  \n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Interval=\"4000\"></SfCarousel> \n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the index of the current carousel item. \n            </summary> \n            <value> \n            If we set the index value, then the slides begin from specified index otherwise the default index value 0 is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel SelectedIndex=\"1\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"SelectedIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Invokes when index of the active slide changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedIndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ButtonsVisibility","TypeName":"Syncfusion.Blazor.Navigations.CarouselButtonVisibility","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets whether to show previous/next navigation buttons or not. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible\" /> \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel ButtonsVisibility=\"CarouselButtonVisibility.VisibleOnHover\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ButtonsVisibility","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.CarouselButtonVisibility"}},{"Kind":"Components.Component","Name":"ShowIndicators","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show indicators or not. \n            </summary> \n            <value> \n            false, the slide transition indicators will not be shown otherwise the indicators is shown. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowIndicators","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPlayButton","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show play button or not to play or pause the transitions. \n            </summary> \n            <value> \n            true, the slide transition play/pause button will be shown otherwise the button is not shown. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowPlayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the carousel will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Width=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PreviousButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PreviousButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NextButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NextButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IndicatorsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IndicatorsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PlayButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PlayButtonTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PauseOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the auto play slides pause on mouse hover or not.\n            </summary>\n            <value>\n            false, the slide transition has been played on mouse enters to carousel otherwise the slide transition paused. The default value is `true`.\n            </value>\n            <remarks>\n            This property applicable when <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay\" /> value is true.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCarousel PauseOnHover=\"false\"></SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PauseOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":547810534,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1046422882,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1654716471,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PreviousButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":874508471,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PreviousButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1377321573,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NextButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-654007365,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NextButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1205392675,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndicatorsTemplate","ParentTag":"SfCarousel"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'IndicatorsTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1975512075,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndicatorsTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'IndicatorsTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-514890373,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlayButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":722213184,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlayButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":165409060,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfContextMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Filter","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the filter selector in which element the context menu should be opened inside the sepcified target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filter","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element selector in which the context menu should be opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpenActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>contextmenu</c>.\n            </value>\n            <remarks>\n            The list of events supports to open the context menu are contextmenu, mousedown, mouseup, touchstart, mouseleave etc. The event must be different from <c> CloseActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to open the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" OpenActionEvents=”OpenAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string OpenAction = “contextmenu”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenActionEvents","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CloseActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to close the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>mousedown, touchstart</c>.\n            </value>\n            <remarks>\n            The list of events supports to close the context menu are mousedown, mouseup, click, touchstart, mouseleave, touchend. The event must be different from <c> OpenActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to close the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" CloseActionEvents=”CloseAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string CloseAction = “mousedown touchstart”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseActionEvents","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfContextMenu","Components.GenericTyped":"True"}},{"HashCode":1176846006,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfContextMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Filter","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the filter selector in which element the context menu should be opened inside the sepcified target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filter","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element selector in which the context menu should be opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpenActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>contextmenu</c>.\n            </value>\n            <remarks>\n            The list of events supports to open the context menu are contextmenu, mousedown, mouseup, touchstart, mouseleave etc. The event must be different from <c> CloseActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to open the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" OpenActionEvents=”OpenAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string OpenAction = “contextmenu”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenActionEvents","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CloseActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to close the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>mousedown, touchstart</c>.\n            </value>\n            <remarks>\n            The list of events supports to close the context menu are mousedown, mouseup, click, touchstart, mouseleave, touchend. The event must be different from <c> OpenActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to close the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" CloseActionEvents=”CloseAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string CloseAction = “mousedown touchstart”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseActionEvents","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfContextMenu","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-932350349,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfContextMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfContextMenu","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-912907450,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfContextMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfContextMenu","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":604496846,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation settings for the menu open.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the time duration to transform object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied while transform.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Navigations.MenuEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the effect that shown in the sub menu transform.\n            The possible effects are:\n             None: Specifies the sub menu transform with no animation effect.\n             SlideDown: Specifies the sub menu transform with slide down effect.\n             ZoomIn: Specifies the sub menu transform with zoom in effect.\n             FadeIn: Specifies the sub menu transform with fade in effect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.MenuEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuAnimationSettings"}},{"HashCode":629325019,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation settings for the menu open.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the time duration to transform object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied while transform.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Navigations.MenuEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the effect that shown in the sub menu transform.\n            The possible effects are:\n             None: Specifies the sub menu transform with no animation effect.\n             SlideDown: Specifies the sub menu transform with slide down effect.\n             ZoomIn: Specifies the sub menu transform with zoom in effect.\n             FadeIn: Specifies the sub menu transform with fade in effect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.MenuEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-646727474,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the menu events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before closing the sub menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before  opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after closing the menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after selecting menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuEvents","Components.GenericTyped":"True"}},{"HashCode":337261523,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the menu events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before closing the sub menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before  opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after closing the menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after selecting menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1470433422,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuFieldSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configures the field options of the Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Children","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the children field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Children","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the CSS icon field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the itemId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the parentId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the separator field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the disabled field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the hidden field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the @attributes (additional attributes) field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuFieldSettings"}},{"HashCode":-672177135,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuFieldSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configures the field options of the Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Children","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the children field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Children","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the CSS icon field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the itemId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the parentId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the separator field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the disabled field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the hidden field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the @attributes (additional attributes) field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2123822029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the items which is going to render as menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.\n            Menu Item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the id for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.MenuItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the sub menu items that is the array of MenuItem.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.MenuItem>"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable/disable separator between the menu items.\n            </summary>\n            <remarks>\n            Separator are either horizontal or vertical lines used to group menu items.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to hide or show the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL for menu item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the additional HTML attributes such as style, title etc., to the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItem"}},{"HashCode":911482929,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the items which is going to render as menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.\n            Menu Item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the id for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.MenuItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the sub menu items that is the array of MenuItem.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.MenuItem>"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable/disable separator between the menu items.\n            </summary>\n            <remarks>\n            Separator are either horizontal or vertical lines used to group menu items.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to hide or show the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL for menu item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the additional HTML attributes such as style, title etc., to the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1626622102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"MenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1100701808,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.MenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1523231879,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List of items that is used to configure menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItems"}},{"HashCode":899344110,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List of items that is used to configure menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1702855241,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"MenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2065320295,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.MenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1708269275,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to specify templates for rendering menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuTemplates","Components.GenericTyped":"True"}},{"HashCode":1787047291,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to specify templates for rendering menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1333835583,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1218035246,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"MenuTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-14541981,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HamburgerMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HamburgerMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Navigations.Orientation","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the orientation of menu whether it can be horizontal or vertical.\n            </summary>\n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation\" /> enumeration. The default value is <c>Orientation.Horizontal</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>Orientation</c> is <c>Horizontal</c>, the menu items will be aligned horizontally. \n            If the <c>Orientation</c> is <c>Vertical</c>, the menu items will be aligned vertically. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Orientation"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element to open/close Menu while click in Hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the title text for hamburger mode in Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfMenu","Components.GenericTyped":"True"}},{"HashCode":753668106,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HamburgerMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HamburgerMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Navigations.Orientation","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the orientation of menu whether it can be horizontal or vertical.\n            </summary>\n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation\" /> enumeration. The default value is <c>Orientation.Horizontal</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>Orientation</c> is <c>Horizontal</c>, the menu items will be aligned horizontally. \n            If the <c>Orientation</c> is <c>Vertical</c>, the menu items will be aligned vertically. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Orientation"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element to open/close Menu while click in Hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the title text for hamburger mode in Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfMenu","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-398627655,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfMenu","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-319244107,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfMenu","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":918720029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Methods partial class\n            </summary>    \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the pager component Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"NumericItemPrefix","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the customized text to append with numeric items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NumericItemPrefix","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowPagerMessage","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnablePagerMessage set to true, then it adds the pager information.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPagerMessage","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Enable or disable persisting component's state between page reloads.\n             </summary>\n            <remarks>\n             Enabling this property will store the pager state such as current page, pagesize, current focus and pager dropdown in the\n             window.localStorage when the component is disposed.\n             </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NumericItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to display in pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NumericItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the records count of visible page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or list of values,\n            It renders DropDownList in the pager which allow us to select page size from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n             Defines the template which renders customized elements in pager instead of default elements.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TotalItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or Sets the total records count which is used to render numeric container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TotalItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Pager. One or more custom CSS classes can be added to a Pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Click","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageClickEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when click the numeric item.\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageClickEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Click=\"OnClick\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void OnClick (PageClickEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Click","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigating to new page\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.ChangingEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Changing=\"Changing\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void Changing (ChangingEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanging","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigated to new page\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.ChangedEventArgs\" /> object which provides the details of navigated page.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageChanged=\"Changed\" ></ PagerEvents >\n            </SfPager>\n            @code{\n               public void Changed(ChangedEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"\n            <summary>\n            An event that is raised when pager component is created\n            </summary>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Created=\"Created\" ></PagerEvents>\n            </SfPager>\n            @code{\n               public void Created()\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"\n            <summary>\n            An event that is raised when dynamically change the page size using pagesizes dropdown\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of updated pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageSizeChanged=\"PageSizeChanged\" ></ PagerEvents >\n            </SfPager>\n            @code{\n               public void PageSizeChanged(PageSizeChangedArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Documentation":"\n            <summary>\n            An event that is raised when pager component when dynamically change the page size using pagesizes dropdown\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of current pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageSizeChanging=\"PageSizeChanging\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void PageSizeChanging (PageSizeChangingArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanging","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager"}},{"HashCode":138485598,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Methods partial class\n            </summary>    \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the pager component Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"NumericItemPrefix","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the customized text to append with numeric items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NumericItemPrefix","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowPagerMessage","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnablePagerMessage set to true, then it adds the pager information.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPagerMessage","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Enable or disable persisting component's state between page reloads.\n             </summary>\n            <remarks>\n             Enabling this property will store the pager state such as current page, pagesize, current focus and pager dropdown in the\n             window.localStorage when the component is disposed.\n             </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NumericItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to display in pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NumericItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the records count of visible page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or list of values,\n            It renders DropDownList in the pager which allow us to select page size from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n             Defines the template which renders customized elements in pager instead of default elements.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Object>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TotalItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or Sets the total records count which is used to render numeric container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TotalItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Pager. One or more custom CSS classes can be added to a Pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Click","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageClickEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when click the numeric item.\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageClickEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Click=\"OnClick\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void OnClick (PageClickEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Click","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigating to new page\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.ChangingEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Changing=\"Changing\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void Changing (ChangingEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanging","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigated to new page\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.ChangedEventArgs\" /> object which provides the details of navigated page.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageChanged=\"Changed\" ></ PagerEvents >\n            </SfPager>\n            @code{\n               public void Changed(ChangedEventArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"\n            <summary>\n            An event that is raised when pager component is created\n            </summary>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents Created=\"Created\" ></PagerEvents>\n            </SfPager>\n            @code{\n               public void Created()\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"\n            <summary>\n            An event that is raised when dynamically change the page size using pagesizes dropdown\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of updated pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageSizeChanged=\"PageSizeChanged\" ></ PagerEvents >\n            </SfPager>\n            @code{\n               public void PageSizeChanged(PageSizeChangedArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Documentation":"\n            <summary>\n            An event that is raised when pager component when dynamically change the page size using pagesizes dropdown\n            </summary>\n            <remarks>\n            Event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of current pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager>\n            <PagerEvents PageSizeChanging=\"PageSizeChanging\"></ PagerEvents >\n            </SfPager>\n            @code{\n               public void PageSizeChanging (PageSizeChangingArgs args)\n               {\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanging","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1346774594,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfPager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1898205467,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfPager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1722624125,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             Defines the template which renders customized elements in pager instead of default elements.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfPager"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1960101224,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             Defines the template which renders customized elements in pager instead of default elements.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.SfPager"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-279980019,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the state(expand/collapse) of the component is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.EventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to open.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.EventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the sidebar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the animation transitions on expanding or collapsing the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnDocumentClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnDocumentClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DockSize","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DockSize","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableDock","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the docking state of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDock","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableGestures","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables the expand or collapse while swiping in the touch devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGestures","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Sidebar in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsOpen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the Sidebar component is open or close.\n            When the Sidebar type is set to `Auto`,\n            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsOpenChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpenChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MediaQuery","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the media query string for resolution, when opens the Sidebar.\n            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MediaQuery","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.SidebarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the position of the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SidebarPosition"}},{"Kind":"Components.Component","Name":"ShowBackdrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowBackdrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Allows to place the sidebar inside the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.SidebarType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the expanding types of the Sidebar.\n            `Over` - The sidebar floats over the main content area.\n            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.\n            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.\n            The main content area will not be adjusted within the screen width.\n             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SidebarType"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.\n            Width can also be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar"}},{"HashCode":-1328299592,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the state(expand/collapse) of the component is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.EventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to open.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.EventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the sidebar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the animation transitions on expanding or collapsing the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnDocumentClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnDocumentClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DockSize","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DockSize","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableDock","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the docking state of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDock","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableGestures","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables the expand or collapse while swiping in the touch devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGestures","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Sidebar in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsOpen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the Sidebar component is open or close.\n            When the Sidebar type is set to `Auto`,\n            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsOpenChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpenChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MediaQuery","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the media query string for resolution, when opens the Sidebar.\n            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MediaQuery","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.SidebarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the position of the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SidebarPosition"}},{"Kind":"Components.Component","Name":"ShowBackdrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowBackdrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Allows to place the sidebar inside the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.SidebarType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the expanding types of the Sidebar.\n            `Over` - The sidebar floats over the main content area.\n            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.\n            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.\n            The main content area will not be adjusted within the screen width.\n             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SidebarType"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.\n            Width can also be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-574921970,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSidebar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-917345481,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfSidebar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":49998047,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            If enabled, the tab’s selected item will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DragArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderPlacement","TypeName":"Syncfusion.Blazor.Navigations.HeaderPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the orientation of the Tab header.\n            The possible values are:\n            - Top: Places the Tab header on the top.\n            - Bottom: Places the Tab header at the bottom.\n            - Left: Places the Tab header at the left.\n            - Right: Places the Tab header at the right.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderPlacement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.HeaderPosition"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.TabItem>","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.TabItem>"}},{"Kind":"Components.Component","Name":"LoadOn","TypeName":"Syncfusion.Blazor.Navigations.ContentLoad","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the modes for the Tab content.\n            The possible modes are:\n            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.\n            `Init` Loads all the tab contents on initial loading.\n            `Demand` Loads the Tab content when required but keeps the content once it is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ContentLoad"}},{"Kind":"Components.Component","Name":"Locale","TypeName":"System.String","Documentation":"\n            <summary>\n            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Locale","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.\n            The possible modes are:\n            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.\n            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index for activating the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItem","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItemChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether to show the close button in the Tab header or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ReorderActiveTab","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to re-order tab items to show active tab item in the header area or popup when OverflowMode is Popup.\n            </summary>\n            <value>\n            true, if active tab item should be visible in header area instead of pop-up; otherwise, false. The default value is true.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab\" /> Property is only applicable when OverflowMode is popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ReorderActiveTab","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab"}},{"HashCode":-2074745204,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            If enabled, the tab’s selected item will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DragArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderPlacement","TypeName":"Syncfusion.Blazor.Navigations.HeaderPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the orientation of the Tab header.\n            The possible values are:\n            - Top: Places the Tab header on the top.\n            - Bottom: Places the Tab header at the bottom.\n            - Left: Places the Tab header at the left.\n            - Right: Places the Tab header at the right.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderPlacement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.HeaderPosition"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.TabItem>","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.TabItem>"}},{"Kind":"Components.Component","Name":"LoadOn","TypeName":"Syncfusion.Blazor.Navigations.ContentLoad","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the modes for the Tab content.\n            The possible modes are:\n            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.\n            `Init` Loads all the tab contents on initial loading.\n            `Demand` Loads the Tab content when required but keeps the content once it is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ContentLoad"}},{"Kind":"Components.Component","Name":"Locale","TypeName":"System.String","Documentation":"\n            <summary>\n            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Locale","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.\n            The possible modes are:\n            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.\n            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index for activating the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItem","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItemChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether to show the close button in the Tab header or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ReorderActiveTab","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to re-order tab items to show active tab item in the header area or popup when OverflowMode is Popup.\n            </summary>\n            <value>\n            true, if active tab item should be visible in header area instead of pop-up; otherwise, false. The default value is true.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab\" /> Property is only applicable when OverflowMode is popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ReorderActiveTab","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-512025203,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":815944759,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfTab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1041636167,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationNext","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationNext"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the next Tab content.\n            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationNext"}},{"HashCode":-844547640,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationNext","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationNext"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the next Tab content.\n            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationNext","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-280491649,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationPrevious"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the previous Tab content.\n            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationPrevious"}},{"HashCode":1622349404,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the previous Tab content.\n            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationPrevious","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1463712419,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Next","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Next","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationNext"}},{"Kind":"Components.Component","Name":"Previous","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Previous","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationPrevious"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationSettings"}},{"HashCode":792373337,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Next","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Next","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationNext"}},{"Kind":"Components.Component","Name":"Previous","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Previous","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabAnimationPrevious"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":501522485,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-131703299,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-557426857,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Added","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers after adding the item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Added","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AddEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Adding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers before adding the tab item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AddEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers after removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.RemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers before removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.RemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.SelectEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectingEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.SelectingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers when the Tab item drag starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Dragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets dropped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dragged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabEvents"}},{"HashCode":-1702827912,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Added","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers after adding the item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Added","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AddEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Adding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers before adding the tab item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.AddEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers after removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.RemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers before removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.RemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.SelectEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectingEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.SelectingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers when the Tab item drag starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Dragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets dropped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dragged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":868054954,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabHeader","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab header properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the icon class that is used to render an icon in the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.\n            The possible values are:\n            - left: Places the icon to the `left` of the item.\n            - top: Places the icon on the `top` of the item.\n            - right: Places the icon to the `right` end of the item.\n            - bottom: Places the icon at the `bottom` of the item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the display text of the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabHeader"}},{"HashCode":922471375,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabHeader","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab header properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the icon class that is used to render an icon in the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.\n            The possible values are:\n            - left: Places the icon to the `left` of the item.\n            - top: Places the icon on the `top` of the item.\n            - right: Places the icon to the `right` end of the item.\n            - bottom: Places the icon at the `bottom` of the item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the display text of the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabHeader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1881172461,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure the Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content of Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the Tab item to customize its styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the control is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Header","TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Documentation":"\n            <summary>\n            The object used for configuring the Tab item header properties.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabHeader"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the tab is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem"}},{"HashCode":-1893183622,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure the Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content of Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the Tab item to customize its styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the control is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Header","TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Documentation":"\n            <summary>\n            The object used for configuring the Tab item header properties.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabHeader"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the tab is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":836608224,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-149781562,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-664894590,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":483171634,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1460127328,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":767788783,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1033113407,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItems"}},{"HashCode":-402379422,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":733863114,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1483396544,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TabItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1064858308,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfToolbar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for toolbar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowKeyboard","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When this property is set to true, it allows the keyboard interaction in toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowKeyboard","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to root element of the Toolbar that helps to customize component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the popup collision.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toolbar in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.ToolbarItem>","Documentation":"\n            <summary>\n            A list of items that is used to configure Toolbar commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.ToolbarItem>"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\n            Possible modes are:\n            - Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.\n            - Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.\n            - MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.\n            - Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\n            If the popup content overflows the height of the page, the rest of the elements will be hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance in scroller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toolbar in pixels/numbers/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the toolbar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfToolbar"}},{"HashCode":-377133398,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfToolbar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n            <summary>\n            The Toolbar control contains a group of commands that are aligned horizontally.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for toolbar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowKeyboard","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When this property is set to true, it allows the keyboard interaction in toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowKeyboard","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to root element of the Toolbar that helps to customize component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the popup collision.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toolbar in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.ToolbarItem>","Documentation":"\n            <summary>\n            A list of items that is used to configure Toolbar commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.ToolbarItem>"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\n            Possible modes are:\n            - Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.\n            - Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.\n            - MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.\n            - Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\n            If the popup content overflows the height of the page, the rest of the elements will be hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance in scroller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toolbar in pixels/numbers/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the toolbar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfToolbar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-165670361,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfToolbar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfToolbar","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1601019481,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfToolbar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfToolbar","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1411512339,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure Toolbar commands.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when click the toolbar item.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar item details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar item text can be obtained from the <c>OnClick</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\" OnClick=\"ItemClick\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ItemClick(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Align","TypeName":"Syncfusion.Blazor.Navigations.ItemAlign","IsEnum":true,"Documentation":"\n             <summary>\n             Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.\n             Possible values are:\n             - Left: To align commands to the left side of the Toolbar.\n             - Center: To align commands at the center of the Toolbar.\n             - Right: To align commands to the right side of the Toolbar.\n            \n             </summary>\n        ","Metadata":{"Common.PropertyName":"Align","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether an item should be disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Defines htmlAttributes used to add custom attributes to Toolbar command.\n            Supports HTML attributes such as style, class, etc.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique ID to be used with button or input element of Toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Overflow","TypeName":"Syncfusion.Blazor.Navigations.OverflowOption","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the Toolbar command display area when an element's content is too large to fit available space.\n            This is applicable only to `Popup` mode. Possible values are:\n            - Show:  Always shows the item as the primary priority on the Toolbar.\n            - Hide: Always shows the item as the secondary priority on the popup.\n            - None: No priority for display, and as per normal order moves to popup when content exceeds.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Overflow","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowOption"}},{"Kind":"Components.Component","Name":"PrefixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes separated by space used to specify an icon for the button.\n            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrefixIcon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowAlwaysInPopup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the priority of items to display it in popup always.\n            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowAlwaysInPopup","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowTextOn","TypeName":"Syncfusion.Blazor.Navigations.DisplayMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies where the button text will be displayed on popup mode of the Toolbar.\n            Possible values are:\n            - Toolbar:  Text will be displayed on Toolbar only.\n            - Overflow: Text will be displayed only when content overflows to popup.\n            - Both: Text will be displayed on popup and Toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTextOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.DisplayMode"}},{"Kind":"Components.Component","Name":"SuffixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes separated by space used to specify an icon for the button.\n            The icon will be positioned after the text content if text is available.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuffixIcon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.\n            \n             </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text to be displayed on the Toolbar button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TooltipText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text to be displayed on hovering the Toolbar button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TooltipText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.ItemType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the types of command to be rendered in the Toolbar.\n            Supported types are:\n            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.\n            - Separator: Adds a horizontal line that separates the Toolbar commands.\n            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,\n            AutoComplete, etc.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemType"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether an item should be hidden or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toolbar button commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem"}},{"HashCode":1852683196,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure Toolbar commands.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when click the toolbar item.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar item details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar item text can be obtained from the <c>OnClick</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\" OnClick=\"ItemClick\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ItemClick(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Align","TypeName":"Syncfusion.Blazor.Navigations.ItemAlign","IsEnum":true,"Documentation":"\n             <summary>\n             Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.\n             Possible values are:\n             - Left: To align commands to the left side of the Toolbar.\n             - Center: To align commands at the center of the Toolbar.\n             - Right: To align commands to the right side of the Toolbar.\n            \n             </summary>\n        ","Metadata":{"Common.PropertyName":"Align","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether an item should be disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Defines htmlAttributes used to add custom attributes to Toolbar command.\n            Supports HTML attributes such as style, class, etc.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique ID to be used with button or input element of Toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Overflow","TypeName":"Syncfusion.Blazor.Navigations.OverflowOption","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the Toolbar command display area when an element's content is too large to fit available space.\n            This is applicable only to `Popup` mode. Possible values are:\n            - Show:  Always shows the item as the primary priority on the Toolbar.\n            - Hide: Always shows the item as the secondary priority on the popup.\n            - None: No priority for display, and as per normal order moves to popup when content exceeds.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Overflow","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.OverflowOption"}},{"Kind":"Components.Component","Name":"PrefixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes separated by space used to specify an icon for the button.\n            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrefixIcon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowAlwaysInPopup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the priority of items to display it in popup always.\n            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowAlwaysInPopup","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowTextOn","TypeName":"Syncfusion.Blazor.Navigations.DisplayMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies where the button text will be displayed on popup mode of the Toolbar.\n            Possible values are:\n            - Toolbar:  Text will be displayed on Toolbar only.\n            - Overflow: Text will be displayed only when content overflows to popup.\n            - Both: Text will be displayed on popup and Toolbar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTextOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.DisplayMode"}},{"Kind":"Components.Component","Name":"SuffixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes separated by space used to specify an icon for the button.\n            The icon will be positioned after the text content if text is available.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuffixIcon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.\n            \n             </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text to be displayed on the Toolbar button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TooltipText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text to be displayed on hovering the Toolbar button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TooltipText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.ItemType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the types of command to be rendered in the Toolbar.\n            Supported types are:\n            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.\n            - Separator: Adds a horizontal line that separates the Toolbar commands.\n            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,\n            AutoComplete, etc.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemType"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether an item should be hidden or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toolbar button commands.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1591549514,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":355775910,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1541085720,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n             <summary>\n             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.\n            \n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":425635193,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n             <summary>\n             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.\n            \n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1990025082,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that is used to configure Toolbar commands.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItems"}},{"HashCode":1158697751,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that is used to configure Toolbar commands.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2129337531,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToolbarItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":380645429,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Toolbar items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1686695646,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with advanced functions to edit, drag and drop, select with CheckBox and more.\n            TreeView can be populated from a data source such as an array of data's or from DataManager.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue parameter\".</typeparam>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            SfTreeView component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfTreeView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Get the RenderFragment content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in\n            desktop, hold the mouse on the node, drag it to the target node and drop the node by releasing\n            the mouse. For touch devices, drag and drop operation is performed by touch, touch move\n            and touch end.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables editing of the text in the TreeView node. When `AllowEditing` property is set\n            to true, the TreeView allows you to edit the node by double clicking the node or by navigating to\n            the node and pressing F2 key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables multi-selection of nodes. To select multiple nodes:\n             Select the nodes by holding down the CTRL key while clicking on the nodes.\n             Select consecutive nodes by clicking the first node to select and hold down the SHIFT key\n            and click the last node to select.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables to wrap the text in the TreeView node. \n            When the `AllowTextWrap` property is set to true, the TreeView node text content will wrap to the next line\n            when its text content exceeds the width of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Documentation":"\n            <summary>\n            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}},{"Kind":"Components.Component","Name":"AutoCheck","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoCheck","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            The `CheckedNodes` property is used to set the nodes that need to be checked or\n            get the ID of nodes that are currently checked in the TreeView component.\n            The `checkedNodes` property depends upon the value of `showCheckBox` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"CheckedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the checked nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS classes to be added with root element of the TreeView to help customize the appearance of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the TreeView component is disabled or not.\n            When set to true, user interaction will not be occurred in TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs in the entire page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines whether to allow the cross-scripting site or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables persisting TreeView state between page reloads. If enabled, following APIs will persist.\n            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.\n            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.\n            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExpandOn","TypeName":"Syncfusion.Blazor.Navigations.ExpandAction","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the action on which the node expands or collapses. The available actions are,\n             `Click` - The expand/collapse operation happens when you single-click the node in both desktop and mobile devices.\n             `DblClick` - The expand/collapse operation happens when you double-click the node in both desktop and mobile devices.\n             `None` - The expand/collapse operation will not happen when you single-click or double-click the node in both desktop\n             and mobile devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ExpandAction"}},{"Kind":"Components.Component","Name":"ExpandedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Represents the expanded nodes in the TreeView component. We can set the nodes that need to be\n            expanded or get the ID of the nodes that are currently expanded by using this property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"ExpandedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the expanded nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Fields","TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Documentation":"\n            <summary>\n            Specifies the data source and mapping fields to render TreeView nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FullRowNavigable","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If this property is set to true, then the entire TreeView node will be navigate-able instead of text element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FullRowNavigable","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullRowSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            On enabling this property, the entire row of the TreeView node gets selected by clicking a node.\n            When disabled only the corresponding node's text gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FullRowSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the load on demand (Lazy load) is set to true. By disabling this property, all the tree nodes are rendered at the\n            beginning itself.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Represents the selected nodes in the TreeView component. We can set the nodes that need to be\n            selected or get the ID of the nodes that are currently selected by using this property.\n            On enabling `AllowMultiSelection` property we can select multiple nodes and on disabling\n            it we can select only a single node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates that the nodes will display CheckBoxes in the TreeView.\n            The CheckBox will be displayed next to the expand/collapse icon of the node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Navigations.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,\n            or are not sorted at all. The available types of sort order are,\n             `None` - The nodes are not sorted.\n             `Ascending` - The nodes are sorted in the ascending order.\n             `Descending` - The nodes are sorted in the ascending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SortOrder"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specify the HtmlAttributes for TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"TreeViewTemplates","TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Documentation":"\n            <summary>\n            Specifies the custom item template of TreeView Node item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeViewTemplates","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the treeview element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.GenericTyped":"True"}},{"HashCode":-1470357828,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with advanced functions to edit, drag and drop, select with CheckBox and more.\n            TreeView can be populated from a data source such as an array of data's or from DataManager.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue parameter\".</typeparam>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            SfTreeView component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfTreeView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Get the RenderFragment content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in\n            desktop, hold the mouse on the node, drag it to the target node and drop the node by releasing\n            the mouse. For touch devices, drag and drop operation is performed by touch, touch move\n            and touch end.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables editing of the text in the TreeView node. When `AllowEditing` property is set\n            to true, the TreeView allows you to edit the node by double clicking the node or by navigating to\n            the node and pressing F2 key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables multi-selection of nodes. To select multiple nodes:\n             Select the nodes by holding down the CTRL key while clicking on the nodes.\n             Select consecutive nodes by clicking the first node to select and hold down the SHIFT key\n            and click the last node to select.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables to wrap the text in the TreeView node. \n            When the `AllowTextWrap` property is set to true, the TreeView node text content will wrap to the next line\n            when its text content exceeds the width of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Documentation":"\n            <summary>\n            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}},{"Kind":"Components.Component","Name":"AutoCheck","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoCheck","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            The `CheckedNodes` property is used to set the nodes that need to be checked or\n            get the ID of nodes that are currently checked in the TreeView component.\n            The `checkedNodes` property depends upon the value of `showCheckBox` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"CheckedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the checked nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS classes to be added with root element of the TreeView to help customize the appearance of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the TreeView component is disabled or not.\n            When set to true, user interaction will not be occurred in TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs in the entire page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines whether to allow the cross-scripting site or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables persisting TreeView state between page reloads. If enabled, following APIs will persist.\n            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.\n            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.\n            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExpandOn","TypeName":"Syncfusion.Blazor.Navigations.ExpandAction","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the action on which the node expands or collapses. The available actions are,\n             `Click` - The expand/collapse operation happens when you single-click the node in both desktop and mobile devices.\n             `DblClick` - The expand/collapse operation happens when you double-click the node in both desktop and mobile devices.\n             `None` - The expand/collapse operation will not happen when you single-click or double-click the node in both desktop\n             and mobile devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ExpandAction"}},{"Kind":"Components.Component","Name":"ExpandedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Represents the expanded nodes in the TreeView component. We can set the nodes that need to be\n            expanded or get the ID of the nodes that are currently expanded by using this property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"ExpandedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the expanded nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Fields","TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Documentation":"\n            <summary>\n            Specifies the data source and mapping fields to render TreeView nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FullRowNavigable","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If this property is set to true, then the entire TreeView node will be navigate-able instead of text element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FullRowNavigable","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullRowSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            On enabling this property, the entire row of the TreeView node gets selected by clicking a node.\n            When disabled only the corresponding node's text gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FullRowSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the load on demand (Lazy load) is set to true. By disabling this property, all the tree nodes are rendered at the\n            beginning itself.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedNodes","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Represents the selected nodes in the TreeView component. We can set the nodes that need to be\n            selected or get the ID of the nodes that are currently selected by using this property.\n            On enabling `AllowMultiSelection` property we can select multiple nodes and on disabling\n            it we can select only a single node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodes","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates that the nodes will display CheckBoxes in the TreeView.\n            The CheckBox will be displayed next to the expand/collapse icon of the node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Navigations.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,\n            or are not sorted at all. The available types of sort order are,\n             `None` - The nodes are not sorted.\n             `Ascending` - The nodes are sorted in the ascending order.\n             `Descending` - The nodes are sorted in the ascending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.SortOrder"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specify the HtmlAttributes for TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"TreeViewTemplates","TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Documentation":"\n            <summary>\n            Specifies the custom item template of TreeView Node item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeViewTemplates","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the treeview element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-433039073,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Get the RenderFragment content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTreeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-506036964,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Get the RenderFragment content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfTreeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1917434708,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewAnimationCollapse"}},{"HashCode":649132702,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewAnimationCollapse","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2060588736,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewAnimationExpand"}},{"HashCode":1662870618,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewAnimationExpand","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2046712881,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView allows us to control the component by using events.\n            </summary>\n            <typeparam name=\"TValue\">\"Tvalue paramter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any TreeView action failed to fetch the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView control is created successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ActionEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when data source is changed in the TreeView. The data source will be changed after performing some operation like\n            drag and drop, node editing, adding and removing node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView control is destroyed successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ActionEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is appended to the TreeView element. It helps to customize specific nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnKeyPress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Documentation":"\n            <summary>\n            Triggers when key press is successful. It helps to customize the operations at key press.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnKeyPress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is checked/unchecked successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeChecked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is to be checked/unchecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeChecking","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is clicked successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node collapses successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node collapses.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node drag (move) starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node dragging (move) stops.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node drag (move) is stopped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is dropped on target element successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeDropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEdited","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is renamed successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeEdited","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEditing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is renamed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeEditing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node expands successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeExpanded","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is to be expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeExpanding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is selected/unselected successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is selected/unselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewEvents","Components.GenericTyped":"True"}},{"HashCode":-1428038089,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView allows us to control the component by using events.\n            </summary>\n            <typeparam name=\"TValue\">\"Tvalue paramter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any TreeView action failed to fetch the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView control is created successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ActionEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when data source is changed in the TreeView. The data source will be changed after performing some operation like\n            drag and drop, node editing, adding and removing node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView control is destroyed successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ActionEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is appended to the TreeView element. It helps to customize specific nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnKeyPress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Documentation":"\n            <summary>\n            Triggers when key press is successful. It helps to customize the operations at key press.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnKeyPress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is checked/unchecked successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeChecked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is to be checked/unchecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeChecking","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is clicked successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node collapses successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node collapses.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node drag (move) starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node dragging (move) stops.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node drag (move) is stopped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is dropped on target element successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeDropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEdited","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is renamed successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeEdited","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEditing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is renamed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeEditing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node expands successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeExpanded","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is to be expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeExpanding","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TreeView node is selected/unselected successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Triggers before the TreeView node is selected/unselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":143783200,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView child element fields properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldChild"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldChild","Components.GenericTyped":"True"}},{"HashCode":-1841908082,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView child element fields properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldChild","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":322913974,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewFieldChild"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldChild","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1914113903,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewFieldChild"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldChild","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1080821601,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the TValue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.IEnumerable<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings","Components.GenericTyped":"True"}},{"HashCode":-1490508256,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the TValue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.IEnumerable<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-343713343,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewFieldsSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-490320433,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1596453354,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the TreeView animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewNodeAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Collapse","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Documentation":"\n            <summary>\n            Specifies the animation to appear when collapsing the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapse","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Documentation":"\n            <summary>\n            Specifies the animation to appear when expanding the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expand","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewAnimationExpand"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewNodeAnimationSettings"}},{"HashCode":220501175,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the TreeView animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Collapse","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Documentation":"\n            <summary>\n            Specifies the animation to appear when collapsing the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapse","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Documentation":"\n            <summary>\n            Specifies the animation to appear when expanding the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expand","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TreeViewAnimationExpand"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewNodeAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-945208442,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewNodeAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewNodeAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1072970957,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewNodeAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":472704248,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component allows you to customize the look of TreeView nodes using Templates.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"NodeTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewTemplates","Components.GenericTyped":"True"}},{"HashCode":-1124324498,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component allows you to customize the look of TreeView nodes using Templates.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"NodeTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-439989231,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NodeTemplate","ParentTag":"TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NodeTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1685857095,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NodeTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NodeTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-127923198,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarEvents","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired on clicking the Toolbar elements.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar element details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar element text can be obtained from the <c>Clicked</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarEvents Clicked=\"ToolbarClicked\"></ToolbarEvents>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ToolbarClicked(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarEvents"}},{"HashCode":1983282137,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarEvents","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired on clicking the Toolbar elements.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar element details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar element text can be obtained from the <c>Clicked</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarEvents Clicked=\"ToolbarClicked\"></ToolbarEvents>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ToolbarClicked(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Navigations.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarEvents","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"ToolbarEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":581416314,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations._Imports","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1317256700,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations._Imports","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1391871401,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the accordion item renderer.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItemRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Documentation":"\n            <summary>\n            Gets or sets the accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.AccordionItem"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AccordionItemRender"}},{"HashCode":-990927241,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the accordion item renderer.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Documentation":"\n            <summary>\n            Gets or sets the accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.AccordionItem"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AccordionItemRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-566432780,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMenuBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"SfMenuBase","Components.GenericTyped":"True"}},{"HashCode":-803134013,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"SfMenuBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1845333265,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMenuBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"SfMenuBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-729333869,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"SfMenuBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":856560976,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MenuClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"MenuClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Style","TypeName":"System.String","Metadata":{"Common.PropertyName":"Style","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateMenuItems","Components.GenericTyped":"True"}},{"HashCode":231065210,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MenuClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"MenuClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Style","TypeName":"System.String","Metadata":{"Common.PropertyName":"Style","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateMenuItems","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1174988522,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateMenuItem","Components.GenericTyped":"True"}},{"HashCode":-364022007,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateMenuItem","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":288255655,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies toolbar content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.ItemModel","Documentation":"\n            <summary>\n            Defines the toolbar item model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemModel"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines toolbar item index.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ToolbarContent"}},{"HashCode":-876019186,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies toolbar content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.ItemModel","Documentation":"\n            <summary>\n            Defines the toolbar item model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.ItemModel"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines toolbar item index.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ToolbarContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":859157305,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the complex list items.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComplexListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HasChild","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the treeview node has child or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChild","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Specifies the Treeview mapped data values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Treeview node data id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index position of Treeview node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ComplexListItems","Components.GenericTyped":"True"}},{"HashCode":-1179232821,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the complex list items.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HasChild","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the treeview node has child or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChild","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Specifies the Treeview mapped data values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Treeview node data id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index position of Treeview node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ComplexListItems","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1247426333,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the ComplexCreateList.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True"}},{"HashCode":-995280910,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the ComplexCreateList.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-213182033,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the TreeViewListItems class.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TreeViewListItems","Components.GenericTyped":"True"}},{"HashCode":809781686,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the TreeViewListItems class.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TreeViewListItems","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":984269018,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies class for expand / collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationSettingsModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationSettingsModel"}},{"HashCode":-1836324696,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies class for expand / collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationSettingsModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":289139158,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for expand animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationExpandModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationExpandModel"}},{"HashCode":-1964527569,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for expand animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationExpandModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2053624964,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationCollapseModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationCollapseModel"}},{"HashCode":-1035098806,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.AnimationEffect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"AnimationCollapseModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":915972478,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List generation of TreeView component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListGeneration"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ListGeneration","Components.GenericTyped":"True"}},{"HashCode":-2126168970,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List generation of TreeView component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.Internal.ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"ListGeneration","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1385919444,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewCommonFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TreeViewCommonFieldsSettings","Components.GenericTyped":"True"}},{"HashCode":-766447641,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TreeViewCommonFieldsSettings","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":138741013,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbSeparator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"PreviousIndex","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of Breadcrumb's item which is rendered before the separator.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreviousIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"BreadcrumbSeparator"}},{"HashCode":-1209028484,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"PreviousIndex","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of Breadcrumb's item which is rendered before the separator.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreviousIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"BreadcrumbSeparator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-628973063,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.BreadcrumbItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateBreadcrumbItem"}},{"HashCode":237673664,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.BreadcrumbItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateBreadcrumbItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1050115925,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateBreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateBreadcrumbItems"}},{"HashCode":1375704182,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Navigations.BreadcrumbItem>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"CreateBreadcrumbItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1287899646,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabHeaderTemplate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.TabItem","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabItem"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TabHeaderTemplate"}},{"HashCode":274860247,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.TabItem","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Navigations.TabItem"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"TabHeaderTemplate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":495606703,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.EventRegister","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Metadata":{"Common.PropertyName":"Handler","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.EventRegister","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"EventRegister"}},{"HashCode":-783519885,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.EventRegister","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Metadata":{"Common.PropertyName":"Handler","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.EventRegister","Common.TypeNamespace":"Syncfusion.Blazor.Navigations.Internal","Common.TypeNameIdentifier":"EventRegister","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1387705066,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True"}},{"HashCode":-287754600,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1081367112,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-899435397,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2011954356,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent"}},{"HashCode":1471402787,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-56567425,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":-1644032506,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2015187318,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1151325298,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-405661019,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView"}},{"HashCode":2003515200,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1365464423,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router"}},{"HashCode":-7546999,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2120878089,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1797106735,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1136340763,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-658626856,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":448271975,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-86010154,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1620199590,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":1508294755,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1464036649,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1479526619,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":978279862,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeRouteView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-454775342,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-436088604,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Policy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Roles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-315402405,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Policy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Roles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2001355185,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":247018418,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-522362497,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":764306540,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1779611403,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-394277580,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":796315725,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1651740537,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1992257912,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":97106263,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-847400150,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingAuthenticationState"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1425970233,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":329015817,"Kind":"Components.EventHandler","Name":"onfocus","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocus","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocus"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1838103151,"Kind":"Components.EventHandler","Name":"onblur","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onblur","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onblur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onblur"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-240474940,"Kind":"Components.EventHandler","Name":"onfocusin","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusin","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusin"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1004262541,"Kind":"Components.EventHandler","Name":"onfocusout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-979444503,"Kind":"Components.EventHandler","Name":"onmouseover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-291784546,"Kind":"Components.EventHandler","Name":"onmouseout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2047184501,"Kind":"Components.EventHandler","Name":"onmousemove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousemove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousemove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":67230473,"Kind":"Components.EventHandler","Name":"onmousedown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousedown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousedown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousedown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-758223364,"Kind":"Components.EventHandler","Name":"onmouseup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1228508444,"Kind":"Components.EventHandler","Name":"onclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1039369665,"Kind":"Components.EventHandler","Name":"ondblclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondblclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondblclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondblclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-639821594,"Kind":"Components.EventHandler","Name":"onwheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":907138890,"Kind":"Components.EventHandler","Name":"onmousewheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousewheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousewheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousewheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":943961575,"Kind":"Components.EventHandler","Name":"oncontextmenu","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncontextmenu","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncontextmenu","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncontextmenu"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":843119679,"Kind":"Components.EventHandler","Name":"ondrag","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrag","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrag"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1408792827,"Kind":"Components.EventHandler","Name":"ondragend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":337671202,"Kind":"Components.EventHandler","Name":"ondragenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-311096758,"Kind":"Components.EventHandler","Name":"ondragleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":45082985,"Kind":"Components.EventHandler","Name":"ondragover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1147248445,"Kind":"Components.EventHandler","Name":"ondragstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":195418913,"Kind":"Components.EventHandler","Name":"ondrop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-201581379,"Kind":"Components.EventHandler","Name":"onkeydown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeydown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeydown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeydown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":4361629,"Kind":"Components.EventHandler","Name":"onkeyup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeyup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeyup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeyup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1973796670,"Kind":"Components.EventHandler","Name":"onkeypress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeypress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeypress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1224869041,"Kind":"Components.EventHandler","Name":"onchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1452683578,"Kind":"Components.EventHandler","Name":"oninput","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninput","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninput"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1410435085,"Kind":"Components.EventHandler","Name":"oninvalid","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninvalid","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninvalid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninvalid"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-539383185,"Kind":"Components.EventHandler","Name":"onreset","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreset","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreset","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreset"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":630326998,"Kind":"Components.EventHandler","Name":"onselect","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselect","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselect"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":689390113,"Kind":"Components.EventHandler","Name":"onselectstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1828686440,"Kind":"Components.EventHandler","Name":"onselectionchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectionchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectionchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectionchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":35503037,"Kind":"Components.EventHandler","Name":"onsubmit","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsubmit","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsubmit"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1827443223,"Kind":"Components.EventHandler","Name":"onbeforecopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2108261839,"Kind":"Components.EventHandler","Name":"onbeforecut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-652689217,"Kind":"Components.EventHandler","Name":"onbeforepaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforepaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforepaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforepaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":805381193,"Kind":"Components.EventHandler","Name":"oncopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2118518094,"Kind":"Components.EventHandler","Name":"oncut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":569805988,"Kind":"Components.EventHandler","Name":"onpaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1876824382,"Kind":"Components.EventHandler","Name":"ontouchcancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchcancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchcancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchcancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":627843572,"Kind":"Components.EventHandler","Name":"ontouchend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":235722626,"Kind":"Components.EventHandler","Name":"ontouchmove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchmove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchmove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchmove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1958299222,"Kind":"Components.EventHandler","Name":"ontouchstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":177799240,"Kind":"Components.EventHandler","Name":"ontouchenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":66680894,"Kind":"Components.EventHandler","Name":"ontouchleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":469295430,"Kind":"Components.EventHandler","Name":"ongotpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ongotpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ongotpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1849385903,"Kind":"Components.EventHandler","Name":"onlostpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onlostpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onlostpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1583880941,"Kind":"Components.EventHandler","Name":"onpointercancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointercancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointercancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointercancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-182495854,"Kind":"Components.EventHandler","Name":"onpointerdown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerdown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerdown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerdown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1382849154,"Kind":"Components.EventHandler","Name":"onpointerenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1982673680,"Kind":"Components.EventHandler","Name":"onpointerleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1268561825,"Kind":"Components.EventHandler","Name":"onpointermove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointermove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointermove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointermove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1747578797,"Kind":"Components.EventHandler","Name":"onpointerout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1225444698,"Kind":"Components.EventHandler","Name":"onpointerover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2044734459,"Kind":"Components.EventHandler","Name":"onpointerup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1675705776,"Kind":"Components.EventHandler","Name":"oncanplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-122732931,"Kind":"Components.EventHandler","Name":"oncanplaythrough","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplaythrough","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplaythrough"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1967985782,"Kind":"Components.EventHandler","Name":"oncuechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncuechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncuechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncuechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-371717273,"Kind":"Components.EventHandler","Name":"ondurationchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondurationchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondurationchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondurationchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":455278496,"Kind":"Components.EventHandler","Name":"onemptied","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onemptied","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onemptied","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onemptied"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1524286700,"Kind":"Components.EventHandler","Name":"onpause","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpause","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpause","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpause"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":868837677,"Kind":"Components.EventHandler","Name":"onplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-74788535,"Kind":"Components.EventHandler","Name":"onplaying","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplaying","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplaying","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplaying"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2096202250,"Kind":"Components.EventHandler","Name":"onratechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onratechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onratechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onratechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1479370105,"Kind":"Components.EventHandler","Name":"onseeked","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeked"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1039498881,"Kind":"Components.EventHandler","Name":"onseeking","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeking","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeking"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-200905978,"Kind":"Components.EventHandler","Name":"onstalled","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstalled","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstalled","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstalled"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":978626756,"Kind":"Components.EventHandler","Name":"onstop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1633737509,"Kind":"Components.EventHandler","Name":"onsuspend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsuspend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsuspend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsuspend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-384356983,"Kind":"Components.EventHandler","Name":"ontimeupdate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeupdate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeupdate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeupdate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1030200256,"Kind":"Components.EventHandler","Name":"onvolumechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onvolumechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onvolumechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onvolumechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2019105360,"Kind":"Components.EventHandler","Name":"onwaiting","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwaiting","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwaiting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwaiting"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-306788873,"Kind":"Components.EventHandler","Name":"onloadstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2137396576,"Kind":"Components.EventHandler","Name":"ontimeout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":612754896,"Kind":"Components.EventHandler","Name":"onabort","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onabort","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onabort","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onabort"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":625603338,"Kind":"Components.EventHandler","Name":"onload","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onload","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onload"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1231207153,"Kind":"Components.EventHandler","Name":"onloadend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-663404976,"Kind":"Components.EventHandler","Name":"onprogress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onprogress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onprogress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onprogress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1797135636,"Kind":"Components.EventHandler","Name":"onerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ErrorEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1148876815,"Kind":"Components.EventHandler","Name":"onactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2085929201,"Kind":"Components.EventHandler","Name":"onbeforeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":401674664,"Kind":"Components.EventHandler","Name":"onbeforedeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforedeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforedeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1149084755,"Kind":"Components.EventHandler","Name":"ondeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1633250371,"Kind":"Components.EventHandler","Name":"onended","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onended","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onended","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onended"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":70829422,"Kind":"Components.EventHandler","Name":"onfullscreenchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-32431110,"Kind":"Components.EventHandler","Name":"onfullscreenerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1097909497,"Kind":"Components.EventHandler","Name":"onloadeddata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadeddata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadeddata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadeddata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1195777906,"Kind":"Components.EventHandler","Name":"onloadedmetadata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadedmetadata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadedmetadata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-992475268,"Kind":"Components.EventHandler","Name":"onpointerlockchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":373143355,"Kind":"Components.EventHandler","Name":"onpointerlockerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1209242036,"Kind":"Components.EventHandler","Name":"onreadystatechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreadystatechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreadystatechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreadystatechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-910864839,"Kind":"Components.EventHandler","Name":"onscroll","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onscroll","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onscroll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onscroll"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1068095928,"Kind":"Components.EventHandler","Name":"ontoggle","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontoggle","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontoggle","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontoggle"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1270112777,"Kind":"Components.Splat","Name":"Attributes","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Merges a collection of attributes into the current element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@attributes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Splat","Name":"@attributes","TypeName":"System.Object","Documentation":"Merges a collection of attributes into the current element or component.","Metadata":{"Common.PropertyName":"Attributes","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Splat","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Attributes"}},{"HashCode":-1917254230,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.Razor","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\n            </summary>\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\n            application-relative URLs are resolved.</remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"itemid","Value":"~/","ValueComparison":2}]},{"TagName":"a","Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"applet","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"area","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"audio","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"base","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"blockquote","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"button","Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"del","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"embed","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"form","Attributes":[{"Name":"action","Value":"~/","ValueComparison":2}]},{"TagName":"html","Attributes":[{"Name":"manifest","Value":"~/","ValueComparison":2}]},{"TagName":"iframe","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"ins","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"menuitem","Attributes":[{"Name":"icon","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"data","Value":"~/","ValueComparison":2}]},{"TagName":"q","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"script","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"track","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"poster","Value":"~/","ValueComparison":2}]}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers","Common.TypeNameIdentifier":"UrlResolutionTagHelper"}},{"HashCode":1906410717,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"a","Attributes":[{"Name":"asp-action"}]},{"TagName":"a","Attributes":[{"Name":"asp-controller"}]},{"TagName":"a","Attributes":[{"Name":"asp-area"}]},{"TagName":"a","Attributes":[{"Name":"asp-page"}]},{"TagName":"a","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"a","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"a","Attributes":[{"Name":"asp-host"}]},{"TagName":"a","Attributes":[{"Name":"asp-protocol"}]},{"TagName":"a","Attributes":[{"Name":"asp-route"}]},{"TagName":"a","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"a","Attributes":[{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-protocol","TypeName":"System.String","Documentation":"\n            <summary>\n            The protocol for the URL, such as \"http\" or \"https\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Protocol"}},{"Kind":"ITagHelper","Name":"asp-host","TypeName":"System.String","Documentation":"\n            <summary>\n            The host name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Host"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL fragment name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"AnchorTagHelper"}},{"HashCode":580896027,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"cache"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"priority","TypeName":"Microsoft.Extensions.Caching.Memory.CacheItemPriority?","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Priority"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"CacheTagHelper"}},{"HashCode":814556048,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"component","TagStructure":2,"Attributes":[{"Name":"type"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"params","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","IndexerNamePrefix":"param-","IndexerTypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets values for component parameters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the component type. This value is required.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ComponentType"}},{"Kind":"ITagHelper","Name":"render-mode","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.RenderMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RenderMode"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ComponentTagHelper"}},{"HashCode":131469736,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"distributed-cache","Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a unique name to discriminate cached entries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"DistributedCacheTagHelper"}},{"HashCode":1681168860,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"environment"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"names","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Names"}},{"Kind":"ITagHelper","Name":"include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Include"}},{"Kind":"ITagHelper","Name":"exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Exclude"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"EnvironmentTagHelper"}},{"HashCode":799714519,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"button","Attributes":[{"Name":"asp-action"}]},{"TagName":"button","Attributes":[{"Name":"asp-controller"}]},{"TagName":"button","Attributes":[{"Name":"asp-area"}]},{"TagName":"button","Attributes":[{"Name":"asp-page"}]},{"TagName":"button","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"button","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"button","Attributes":[{"Name":"asp-route"}]},{"TagName":"button","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"button","Attributes":[{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"FormActionTagHelper"}},{"HashCode":1320882559,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"form"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-antiforgery","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Whether the antiforgery token should be generated.\n            </summary>\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\n        ","Metadata":{"Common.PropertyName":"Antiforgery"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"FormTagHelper"}},{"HashCode":228388623,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"asp-append-version"},{"Name":"src"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"\n            <summary>\n            Source of the image.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to the src urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ImageTagHelper"}},{"HashCode":-442473921,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-format","TypeName":"System.String","Documentation":"\n            <summary>\n            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\n            </summary>\n            <remarks>\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.String","Documentation":"\n            <summary>\n            The type of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputTypeName"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"\n            <summary>\n            The value of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"InputTagHelper"}},{"HashCode":480205002,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"label","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"LabelTagHelper"}},{"HashCode":-1805690727,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'href' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-class"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-property"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-value"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"href","TypeName":"System.String","Documentation":"\n            <summary>\n            Address of the linked resource.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Href"}},{"Kind":"ITagHelper","Name":"asp-href-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HrefInclude"}},{"Kind":"ITagHelper","Name":"asp-href-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHref"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to the href urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\n            one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHrefInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-class","TypeName":"System.String","Documentation":"\n            <summary>\n            The class name defined in the stylesheet to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestClass"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-property","TypeName":"System.String","Documentation":"\n            <summary>\n            The CSS property name to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestProperty"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-value","TypeName":"System.String","Documentation":"\n            <summary>\n            The CSS property value to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestValue"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"LinkTagHelper"}},{"HashCode":130217762,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\n            </summary>\n            <remarks>\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\n            in some cases.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"option"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies a value for the &lt;option&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"OptionTagHelper"}},{"HashCode":-604058190,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            Renders a partial view.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"partial","TagStructure":2,"Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name or path of the partial view that is rendered to the response.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"model","TypeName":"System.Object","Documentation":"\n            <summary>\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"ITagHelper","Name":"optional","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When optional, executing the tag helper will no-op if the view cannot be located.\n            Otherwise will throw stating the view could not be found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Optional"}},{"Kind":"ITagHelper","Name":"fallback-name","TypeName":"System.String","Documentation":"\n            <summary>\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackName"}},{"Kind":"ITagHelper","Name":"view-data","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary","IndexerNamePrefix":"view-data-","IndexerTypeName":"System.Object","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ViewData"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"PartialTagHelper"}},{"HashCode":-1418119244,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"persist-component-state","TagStructure":2}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"persist-mode","TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistenceMode"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"PersistComponentStateTagHelper"}},{"HashCode":981781021,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"script","Attributes":[{"Name":"asp-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-test"}]},{"TagName":"script","Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"\n            <summary>\n            Address of the external script to use.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-src-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SrcInclude"}},{"Kind":"ITagHelper","Name":"asp-src-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL of a Script tag to fallback to in the case the primary one fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrc"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to src urls.\n            </summary>\n            <remarks>\n            A query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\n            primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrcInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test","TypeName":"System.String","Documentation":"\n            <summary>\n            The script method defined in the primary script to use for the fallback test.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestExpression"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ScriptTagHelper"}},{"HashCode":-582315239,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\n            <c>asp-items</c> attribute(s).\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"asp-for"}]},{"TagName":"select","Attributes":[{"Name":"asp-items"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-items","TypeName":"System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>","Documentation":"\n            <summary>\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\n            &lt;optgroup&gt; and &lt;option&gt; elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"SelectTagHelper"}},{"HashCode":718418561,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"TextAreaTagHelper"}},{"HashCode":97220606,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-for</c>\n            attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"span","Attributes":[{"Name":"asp-validation-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            Gets an expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ValidationMessageTagHelper"}},{"HashCode":1117599899,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-summary</c>\n            attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"div","Attributes":[{"Name":"asp-validation-summary"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-summary","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary","IsEnum":true,"Documentation":"\n            <summary>\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\n            </summary>\n            <exception cref=\"T:System.ArgumentException\">\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\n            <c>(ValidationSummary)23</c>.\n            </exception>\n        ","Metadata":{"Common.PropertyName":"ValidationSummary"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ValidationSummaryTagHelper"}},{"HashCode":25545337,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@bind-","NameComparison":1,"Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-...","TypeName":"System.Collections.Generic.Dictionary<string, object>","IndexerNamePrefix":"@bind-","IndexerTypeName":"System.Object","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.","Metadata":{"Common.PropertyName":"Event"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.Fallback":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Bind","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"Bind"}},{"HashCode":2099579374,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":533011788,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":621380780,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_checked"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-checked","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"checked","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"checkbox","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":4659827,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"text","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1307972099,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1343564854,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1064910446,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":642512202,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1554464794,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1219776405,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1994703868,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-613148885,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-78062314,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-796606476,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-863058213,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1094535082,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-477051160,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":643644634,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":895990381,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":-1265094581,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-562209201,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":1224407547,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1458003054,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":422982115,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":139286329,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":836218997,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-276466970,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":255918235,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1922826732,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1515215484,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":732837132,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner"}},{"HashCode":-81056987,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1029178236,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":427165008,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":-635594616,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1117985218,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-558296982,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":38300277,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-321713209,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton"}},{"HashCode":1879752391,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-639383224,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch"}},{"HashCode":-541155685,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1663989373,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfGrid","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid"}},{"HashCode":736143088,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.SfGrid","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Grids","Common.TypeNameIdentifier":"SfGrid","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":491004402,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog"}},{"HashCode":-110733755,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":664567643,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase"}},{"HashCode":791827286,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1214086615,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar"}},{"HashCode":-1869639668,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar"}},{"HashCode":-981305993,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1526707830,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-511210464,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker"}},{"HashCode":-327101763,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1048621361,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker"}},{"HashCode":1389342860,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker"}},{"HashCode":-1034005142,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":465521593,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1420515860,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker"}},{"HashCode":2073762891,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1877035781,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker"}},{"HashCode":1446888877,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1154752470,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender"}},{"HashCode":-16334285,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender"}},{"HashCode":487462081,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1112810484,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-427198319,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell"}},{"HashCode":1987147315,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1941716359,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader"}},{"HashCode":-894362025,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1373307514,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete"}},{"HashCode":1697394136,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete"}},{"HashCode":935538739,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-639364906,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":821441736,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox"}},{"HashCode":-555082540,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox"}},{"HashCode":-500753566,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":966312566,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1200267593,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList"}},{"HashCode":1791091912,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList"}},{"HashCode":-181207334,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":365783346,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":820580114,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox"}},{"HashCode":948333475,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":223220917,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect"}},{"HashCode":-216200825,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1704738567,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton"}},{"HashCode":-2062964917,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-803580221,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker"}},{"HashCode":1551462081,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1018204620,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox"}},{"HashCode":41150458,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":50147628,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox"}},{"HashCode":993121376,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-224781523,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents"}},{"HashCode":-450589781,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2080527725,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider"}},{"HashCode":-1918250893,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2095632947,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox"}},{"HashCode":-1804902183,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1847194521,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase"}},{"HashCode":-1520840346,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":206200320,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItem","Attributes":[{"Name":"@bind-Expanded","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Expanded"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Expanded","Components.Bind.ChangeAttribute":"ExpandedChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem"}},{"HashCode":1430026273,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItem","Attributes":[{"Name":"@bind-Expanded","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Expanded"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Expanded","Components.Bind.ChangeAttribute":"ExpandedChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"AccordionItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-252273731,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAccordion","Attributes":[{"Name":"@bind-ExpandedIndices","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedIndices","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedIndices"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedIndices","Components.Bind.ChangeAttribute":"ExpandedIndicesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion"}},{"HashCode":971948621,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfAccordion","Attributes":[{"Name":"@bind-ExpandedIndices","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedIndices","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedIndices"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedIndices","Components.Bind.ChangeAttribute":"ExpandedIndicesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfAccordion","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-505604554,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfBreadcrumb","Attributes":[{"Name":"@bind-ActiveItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveItem","Components.Bind.ChangeAttribute":"ActiveItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb"}},{"HashCode":-1034121624,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Attributes":[{"Name":"@bind-ActiveItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveItem","Components.Bind.ChangeAttribute":"ActiveItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfBreadcrumb","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":962550865,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCarousel","Attributes":[{"Name":"@bind-SelectedIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedIndex"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedIndex","Components.Bind.ChangeAttribute":"SelectedIndexChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel"}},{"HashCode":-2088439883,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfCarousel","Attributes":[{"Name":"@bind-SelectedIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedIndex"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedIndex","Components.Bind.ChangeAttribute":"SelectedIndexChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfCarousel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1024702464,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfPager","Attributes":[{"Name":"@bind-PageSize","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-PageSize","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"PageSize"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"PageSize","Components.Bind.ChangeAttribute":"PageSizeChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager"}},{"HashCode":-164007583,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfPager","Attributes":[{"Name":"@bind-PageSize","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-PageSize","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"PageSize"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"PageSize","Components.Bind.ChangeAttribute":"PageSizeChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfPager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2031057357,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSidebar","Attributes":[{"Name":"@bind-IsOpen","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-IsOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"IsOpen"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"IsOpen","Components.Bind.ChangeAttribute":"IsOpenChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar"}},{"HashCode":-1261160145,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfSidebar","Attributes":[{"Name":"@bind-IsOpen","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-IsOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"IsOpen"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"IsOpen","Components.Bind.ChangeAttribute":"IsOpenChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfSidebar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1416184557,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTab","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedItem","Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab"}},{"HashCode":-839895655,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTab","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedItem","Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-902379561,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-CheckedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CheckedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CheckedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"CheckedNodes","Components.Bind.ChangeAttribute":"CheckedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView"}},{"HashCode":1570622827,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-ExpandedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedNodes","Components.Bind.ChangeAttribute":"ExpandedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView"}},{"HashCode":-130782877,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-SelectedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedNodes","Components.Bind.ChangeAttribute":"SelectedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView"}},{"HashCode":-1584701943,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-CheckedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CheckedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CheckedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"CheckedNodes","Components.Bind.ChangeAttribute":"CheckedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-956921716,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-ExpandedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedNodes","Components.Bind.ChangeAttribute":"ExpandedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1821825777,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-SelectedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedNodes","Components.Bind.ChangeAttribute":"SelectedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"SfTreeView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":902536285,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldsSettings","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings"}},{"HashCode":-1916907604,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Navigations","Common.TypeNameIdentifier":"TreeViewFieldsSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":93715084,"Kind":"Components.Ref","Name":"Ref","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Populates the specified field or property with a reference to the element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ref","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Ref","Name":"@ref","TypeName":"System.Object","Documentation":"Populates the specified field or property with a reference to the element or component.","Metadata":{"Common.PropertyName":"Ref","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Ref","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Ref"}},{"HashCode":-115576540,"Kind":"Components.Key","Name":"Key","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@key","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Key","Name":"@key","TypeName":"System.Object","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","Metadata":{"Common.PropertyName":"Key","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Key","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Key"}}],"CSharpLanguageVersion":1000},"RootNamespace":"RacingCars","Documents":[{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Cars\\Index.razor","TargetPath":"Pages\\Cars\\Index.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Pilots\\AddPilot.razor","TargetPath":"Pages\\Pilots\\AddPilot.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Pilots\\Index.razor","TargetPath":"Pages\\Pilots\\Index.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Index.razor","TargetPath":"Pages\\Index.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\_Imports.razor","TargetPath":"_Imports.razor","FileKind":"componentImport"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\_Host.cshtml","TargetPath":"Pages\\_Host.cshtml","FileKind":"mvc"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Cars\\AddCar.razor","TargetPath":"Pages\\Cars\\AddCar.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\App.razor","TargetPath":"App.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Pilots\\EditPilot.razor","TargetPath":"Pages\\Pilots\\EditPilot.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Shared\\NavMenu.razor","TargetPath":"Shared\\NavMenu.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Shared\\SurveyPrompt.razor","TargetPath":"Shared\\SurveyPrompt.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Error.cshtml","TargetPath":"Pages\\Error.cshtml","FileKind":"mvc"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Shared\\MainLayout.razor","TargetPath":"Shared\\MainLayout.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Cars\\EditCar.razor","TargetPath":"Pages\\Cars\\EditCar.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\_Layout.cshtml","TargetPath":"Pages\\_Layout.cshtml","FileKind":"mvc"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\TopRacers.razor","TargetPath":"Pages\\TopRacers.razor","FileKind":"component"},{"FilePath":"D:\\DAVID\\GitDesktop\\CarRacing\\RacingCars\\Pages\\Races\\Index.razor","TargetPath":"Pages\\Races\\Index.razor","FileKind":"component"}],"SerializationFormat":"0.3"}